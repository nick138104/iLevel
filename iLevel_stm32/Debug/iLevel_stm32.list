
iLevel_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080069a8  080069a8  000169a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c38  08006c38  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c38  08006c38  00016c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c40  08006c40  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08006c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200001f4  08006e3c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08006e3c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b22a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2f  00000000  00000000  0002b44e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002ce80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  0002da88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001596c  00000000  00000000  0002e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008607  00000000  00000000  00043f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ac69  00000000  00000000  0004c52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  000d7210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006990 	.word	0x08006990

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08006990 	.word	0x08006990

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char data[4] = "";
char buffer[21] = "F:0|S:123.45|T:67.89"; // F:x|S:xxx.xx|T:xx.xx
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_UART_RxCpltCallback+0x48>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d111      	bne.n	8000f8c <HAL_UART_RxCpltCallback+0x34>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f68:	2120      	movs	r1, #32
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <HAL_UART_RxCpltCallback+0x4c>)
 8000f6c:	f001 fa0d 	bl	800238a <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	2204      	movs	r2, #4
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <HAL_UART_RxCpltCallback+0x50>)
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_UART_RxCpltCallback+0x54>)
 8000f7a:	f002 fdb0 	bl	8003ade <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	2215      	movs	r2, #21
 8000f84:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <HAL_UART_RxCpltCallback+0x58>)
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <HAL_UART_RxCpltCallback+0x48>)
 8000f88:	f002 fda9 	bl	8003ade <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart1, &data, sizeof(data));
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <HAL_UART_RxCpltCallback+0x50>)
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <HAL_UART_RxCpltCallback+0x48>)
 8000f92:	f002 fe3d 	bl	8003c10 <HAL_UART_Receive_IT>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002fc 	.word	0x200002fc
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	20000210 	.word	0x20000210
 8000fac:	20000340 	.word	0x20000340
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <Set_Pin_Output>:
uint16_t TEMP;

float Temperature = 0;
uint8_t Presence = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 f81e 	bl	8002024 <HAL_GPIO_Init>
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP; // GPIO_NOPULL / GPIO_PULLUP
 8001014:	2301      	movs	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 f800 	bl	8002024 <HAL_GPIO_Init>
}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <DS18B20_Start>:
/*********************************** DS18B20 FUNCTIONS ****************************************/

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001036:	2102      	movs	r1, #2
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <DS18B20_Start+0x5c>)
 800103a:	f7ff ffbb 	bl	8000fb4 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <DS18B20_Start+0x5c>)
 8001044:	f001 f988 	bl	8002358 <HAL_GPIO_WritePin>
	usDelay(480);   // usDelay according to datasheet
 8001048:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800104c:	f000 fbce 	bl	80017ec <usDelay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001050:	2102      	movs	r1, #2
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <DS18B20_Start+0x5c>)
 8001054:	f7ff ffcc 	bl	8000ff0 <Set_Pin_Input>
	usDelay(80);    // usDelay according to datasheet
 8001058:	2050      	movs	r0, #80	; 0x50
 800105a:	f000 fbc7 	bl	80017ec <usDelay>

	if (!(HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)))
 800105e:	2102      	movs	r1, #2
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <DS18B20_Start+0x5c>)
 8001062:	f001 f961 	bl	8002328 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <DS18B20_Start+0x46>
		Response = 1;    // if the pin is low i.e the presence pulse is detected
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e001      	b.n	8001076 <DS18B20_Start+0x4a>
	else
		Response = -1;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	71fb      	strb	r3, [r7, #7]

	usDelay(400); // 480 us usDelay totally.
 8001076:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800107a:	f000 fbb7 	bl	80017ec <usDelay>

	return Response;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020000 	.word	0x40020000

0800108c <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001096:	2102      	movs	r1, #2
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <DS18B20_Write+0x84>)
 800109a:	f7ff ff8b 	bl	8000fb4 <Set_Pin_Output>

	for (int i = 0; i < 8; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e02e      	b.n	8001102 <DS18B20_Write+0x76>

		if ((data & (1 << i)) != 0)  // if the bit is high
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <DS18B20_Write+0x50>
				{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80010b4:	2102      	movs	r1, #2
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <DS18B20_Write+0x84>)
 80010b8:	f7ff ff7c 	bl	8000fb4 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 80010bc:	2200      	movs	r2, #0
 80010be:	2102      	movs	r1, #2
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <DS18B20_Write+0x84>)
 80010c2:	f001 f949 	bl	8002358 <HAL_GPIO_WritePin>
			usDelay(1);  // wait for 1 us
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 fb90 	bl	80017ec <usDelay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80010cc:	2102      	movs	r1, #2
 80010ce:	4810      	ldr	r0, [pc, #64]	; (8001110 <DS18B20_Write+0x84>)
 80010d0:	f7ff ff8e 	bl	8000ff0 <Set_Pin_Input>
			usDelay(50);
 80010d4:	2032      	movs	r0, #50	; 0x32
 80010d6:	f000 fb89 	bl	80017ec <usDelay>
 80010da:	e00f      	b.n	80010fc <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80010dc:	2102      	movs	r1, #2
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <DS18B20_Write+0x84>)
 80010e0:	f7ff ff68 	bl	8000fb4 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the pin LOW
 80010e4:	2200      	movs	r2, #0
 80010e6:	2102      	movs	r1, #2
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <DS18B20_Write+0x84>)
 80010ea:	f001 f935 	bl	8002358 <HAL_GPIO_WritePin>
			usDelay(50);
 80010ee:	2032      	movs	r0, #50	; 0x32
 80010f0:	f000 fb7c 	bl	80017ec <usDelay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80010f4:	2102      	movs	r1, #2
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <DS18B20_Write+0x84>)
 80010f8:	f7ff ff7a 	bl	8000ff0 <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b07      	cmp	r3, #7
 8001106:	ddcd      	ble.n	80010a4 <DS18B20_Write+0x18>
		}
	}
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40020000 	.word	0x40020000

08001114 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800111e:	2102      	movs	r1, #2
 8001120:	481a      	ldr	r0, [pc, #104]	; (800118c <DS18B20_Read+0x78>)
 8001122:	f7ff ff65 	bl	8000ff0 <Set_Pin_Input>

	for (int i = 0; i < 8; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	e026      	b.n	800117a <DS18B20_Read+0x66>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 800112c:	2102      	movs	r1, #2
 800112e:	4817      	ldr	r0, [pc, #92]	; (800118c <DS18B20_Read+0x78>)
 8001130:	f7ff ff40 	bl	8000fb4 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0); // pull the data pin LOW
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	4814      	ldr	r0, [pc, #80]	; (800118c <DS18B20_Read+0x78>)
 800113a:	f001 f90d 	bl	8002358 <HAL_GPIO_WritePin>
		usDelay(1);  // wait for > 1us
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fb54 	bl	80017ec <usDelay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001144:	2102      	movs	r1, #2
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <DS18B20_Read+0x78>)
 8001148:	f7ff ff52 	bl	8000ff0 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 800114c:	2102      	movs	r1, #2
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <DS18B20_Read+0x78>)
 8001150:	f001 f8ea 	bl	8002328 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <DS18B20_Read+0x5a>
				{
			value |= 1 << i;  // read = 1
 800115a:	2201      	movs	r2, #1
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	b25a      	sxtb	r2, r3
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4313      	orrs	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	71fb      	strb	r3, [r7, #7]
		}
		usDelay(50);
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f000 fb3c 	bl	80017ec <usDelay>
	for (int i = 0; i < 8; i++) {
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b07      	cmp	r3, #7
 800117e:	ddd5      	ble.n	800112c <DS18B20_Read+0x18>
	}
	return value;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020000 	.word	0x40020000

08001190 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001196:	f000 fd7d 	bl	8001c94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800119a:	f000 f90b 	bl	80013b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800119e:	f000 faa5 	bl	80016ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011a2:	f000 fa79 	bl	8001698 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 80011a6:	f000 f96d 	bl	8001484 <MX_TIM3_Init>
	MX_TIM4_Init();
 80011aa:	f000 f9db 	bl	8001564 <MX_TIM4_Init>
	MX_TIM10_Init();
 80011ae:	f000 fa25 	bl	80015fc <MX_TIM10_Init>
	MX_USART1_UART_Init();
 80011b2:	f000 fa47 	bl	8001644 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	int Float = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 1000);
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	2215      	movs	r2, #21
 80011c0:	496b      	ldr	r1, [pc, #428]	; (8001370 <main+0x1e0>)
 80011c2:	486c      	ldr	r0, [pc, #432]	; (8001374 <main+0x1e4>)
 80011c4:	f002 fc8b 	bl	8003ade <HAL_UART_Transmit>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// set trig to low for few usec
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	486a      	ldr	r0, [pc, #424]	; (8001378 <main+0x1e8>)
 80011d0:	f001 f8c2 	bl	8002358 <HAL_GPIO_WritePin>
		usDelay(3);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 fb09 	bl	80017ec <usDelay>

		// output 10 usec trig
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	4865      	ldr	r0, [pc, #404]	; (8001378 <main+0x1e8>)
 80011e2:	f001 f8b9 	bl	8002358 <HAL_GPIO_WritePin>
		usDelay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f000 fb00 	bl	80017ec <usDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f2:	4861      	ldr	r0, [pc, #388]	; (8001378 <main+0x1e8>)
 80011f4:	f001 f8b0 	bl	8002358 <HAL_GPIO_WritePin>

		// echo signal pulse width
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	4860      	ldr	r0, [pc, #384]	; (800137c <main+0x1ec>)
 80011fc:	f001 fda2 	bl	8002d44 <HAL_TIM_IC_Start_IT>
		// wait for ic flag
		uint32_t startTick = HAL_GetTick();
 8001200:	f000 fdae 	bl	8001d60 <HAL_GetTick>
 8001204:	6038      	str	r0, [r7, #0]
		do {
			if (icFlag)
 8001206:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <main+0x1f0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d108      	bne.n	8001220 <main+0x90>
				break;
		} while ((HAL_GetTick() - startTick) < 500);
 800120e:	f000 fda7 	bl	8001d60 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800121c:	d3f3      	bcc.n	8001206 <main+0x76>
 800121e:	e000      	b.n	8001222 <main+0x92>
				break;
 8001220:	bf00      	nop
		icFlag = 0;
 8001222:	4b57      	ldr	r3, [pc, #348]	; (8001380 <main+0x1f0>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001228:	2100      	movs	r1, #0
 800122a:	4854      	ldr	r0, [pc, #336]	; (800137c <main+0x1ec>)
 800122c:	f001 fdf2 	bl	8002e14 <HAL_TIM_IC_Stop_IT>

		// calculate distance in cm
		if (edge2Time > edge1Time) {
 8001230:	4b54      	ldr	r3, [pc, #336]	; (8001384 <main+0x1f4>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b54      	ldr	r3, [pc, #336]	; (8001388 <main+0x1f8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d91f      	bls.n	800127c <main+0xec>
			distance = ((edge2Time - edge1Time) + 0.0f) * 0.0171821;
 800123c:	4b51      	ldr	r3, [pc, #324]	; (8001384 <main+0x1f4>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b51      	ldr	r3, [pc, #324]	; (8001388 <main+0x1f8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800138c <main+0x1fc>
 8001252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff f97d 	bl	8000558 <__aeabi_f2d>
 800125e:	a342      	add	r3, pc, #264	; (adr r3, 8001368 <main+0x1d8>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f9d0 	bl	8000608 <__aeabi_dmul>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fca2 	bl	8000bb8 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <main+0x200>)
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	e003      	b.n	8001284 <main+0xf4>
		} else {
			distance = 0.0f;
 800127c:	4b44      	ldr	r3, [pc, #272]	; (8001390 <main+0x200>)
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
		}
//		char dis[50];
//		sprintf(dis, "Distance (cm) = %06.2f\r\n", distance);
//		HAL_UART_Transmit(&huart2, (uint8_t*) dis, strlen(dis), HAL_MAX_DELAY);
//*********************************************float sensor**********************************//
		if (HAL_GPIO_ReadPin(FLOAT_GPIO_Port, FLOAT_Pin) == GPIO_PIN_RESET) {
 8001284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001288:	4842      	ldr	r0, [pc, #264]	; (8001394 <main+0x204>)
 800128a:	f001 f84d 	bl	8002328 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <main+0x10a>
			Float = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	e001      	b.n	800129e <main+0x10e>
		} else {
			Float = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
		}

//*********************************************ds18b20**********************************//
		Presence = DS18B20_Start();
 800129e:	f7ff fec5 	bl	800102c <DS18B20_Start>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <main+0x208>)
 80012a8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fd64 	bl	8001d78 <HAL_Delay>
		DS18B20_Write(0xCC);  // skip ROM
 80012b0:	20cc      	movs	r0, #204	; 0xcc
 80012b2:	f7ff feeb 	bl	800108c <DS18B20_Write>
		DS18B20_Write(0x44);  // convert t
 80012b6:	2044      	movs	r0, #68	; 0x44
 80012b8:	f7ff fee8 	bl	800108c <DS18B20_Write>
		HAL_Delay(800);
 80012bc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80012c0:	f000 fd5a 	bl	8001d78 <HAL_Delay>

		Presence = DS18B20_Start();
 80012c4:	f7ff feb2 	bl	800102c <DS18B20_Start>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <main+0x208>)
 80012ce:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f000 fd51 	bl	8001d78 <HAL_Delay>
		DS18B20_Write(0xCC);  // skip ROM
 80012d6:	20cc      	movs	r0, #204	; 0xcc
 80012d8:	f7ff fed8 	bl	800108c <DS18B20_Write>
		DS18B20_Write(0xBE);  // Read Scratch-pad
 80012dc:	20be      	movs	r0, #190	; 0xbe
 80012de:	f7ff fed5 	bl	800108c <DS18B20_Write>

		Temp_byte1 = DS18B20_Read();
 80012e2:	f7ff ff17 	bl	8001114 <DS18B20_Read>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <main+0x20c>)
 80012ec:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DS18B20_Read();
 80012ee:	f7ff ff11 	bl	8001114 <DS18B20_Read>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <main+0x210>)
 80012f8:	701a      	strb	r2, [r3, #0]
		TEMP = (Temp_byte2 << 8) | Temp_byte1;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <main+0x210>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <main+0x20c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <main+0x214>)
 8001310:	801a      	strh	r2, [r3, #0]
		Temperature = (float) TEMP / 16;
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <main+0x214>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <main+0x218>)
 8001328:	edc3 7a00 	vstr	s15, [r3]

//		char temp[50];
//		sprintf(temp, "F:%d|S:%06.2f|T:%.2f\r\n", Float, distance, Temperature);
//		HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp),HAL_MAX_DELAY);

		sprintf(buffer, "F:%d|S:%06.2f|T:%.2f", Float, distance, Temperature);
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <main+0x200>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f911 	bl	8000558 <__aeabi_f2d>
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <main+0x218>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f90a 	bl	8000558 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800134c:	e9cd 4500 	strd	r4, r5, [sp]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4916      	ldr	r1, [pc, #88]	; (80013ac <main+0x21c>)
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <main+0x1e0>)
 8001356:	f003 ff3b 	bl	80051d0 <siprintf>
		HAL_UART_Receive_IT(&huart1, &data, sizeof(data));
 800135a:	2204      	movs	r2, #4
 800135c:	4914      	ldr	r1, [pc, #80]	; (80013b0 <main+0x220>)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <main+0x1e4>)
 8001360:	f002 fc56 	bl	8003c10 <HAL_UART_Receive_IT>
	while (1) {
 8001364:	e730      	b.n	80011c8 <main+0x38>
 8001366:	bf00      	nop
 8001368:	364e70a6 	.word	0x364e70a6
 800136c:	3f91982f 	.word	0x3f91982f
 8001370:	20000000 	.word	0x20000000
 8001374:	200002fc 	.word	0x200002fc
 8001378:	40020000 	.word	0x40020000
 800137c:	200002b8 	.word	0x200002b8
 8001380:	20000214 	.word	0x20000214
 8001384:	2000021c 	.word	0x2000021c
 8001388:	20000218 	.word	0x20000218
 800138c:	00000000 	.word	0x00000000
 8001390:	200002b4 	.word	0x200002b4
 8001394:	40020400 	.word	0x40020400
 8001398:	20000224 	.word	0x20000224
 800139c:	2000033c 	.word	0x2000033c
 80013a0:	20000380 	.word	0x20000380
 80013a4:	200002f8 	.word	0x200002f8
 80013a8:	20000220 	.word	0x20000220
 80013ac:	080069a8 	.word	0x080069a8
 80013b0:	20000210 	.word	0x20000210

080013b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 faa0 	bl	8004908 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <SystemClock_Config+0xc8>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <SystemClock_Config+0xc8>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <SystemClock_Config+0xc8>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <SystemClock_Config+0xcc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <SystemClock_Config+0xcc>)
 80013fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <SystemClock_Config+0xcc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001418:	2310      	movs	r3, #16
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001424:	2308      	movs	r3, #8
 8001426:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001428:	2354      	movs	r3, #84	; 0x54
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001430:	2304      	movs	r3, #4
 8001432:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f000 ffc1 	bl	80023c0 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x94>
		Error_Handler();
 8001444:	f000 fa34 	bl	80018b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fa1b 	bl	80028a0 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc0>
		Error_Handler();
 8001470:	f000 fa1e 	bl	80018b0 <Error_Handler>
	}
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	; 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80014a2:	463b      	mov	r3, r7
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_TIM3_Init+0xd8>)
 80014b0:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <MX_TIM3_Init+0xdc>)
 80014b2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <MX_TIM3_Init+0xd8>)
 80014b6:	2253      	movs	r2, #83	; 0x53
 80014b8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_TIM3_Init+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <MX_TIM3_Init+0xd8>)
 80014c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_TIM3_Init+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <MX_TIM3_Init+0xd8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80014d4:	4821      	ldr	r0, [pc, #132]	; (800155c <MX_TIM3_Init+0xd8>)
 80014d6:	f001 fbd5 	bl	8002c84 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x60>
		Error_Handler();
 80014e0:	f000 f9e6 	bl	80018b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	4619      	mov	r1, r3
 80014f0:	481a      	ldr	r0, [pc, #104]	; (800155c <MX_TIM3_Init+0xd8>)
 80014f2:	f001 fea3 	bl	800323c <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80014fc:	f000 f9d8 	bl	80018b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8001500:	4816      	ldr	r0, [pc, #88]	; (800155c <MX_TIM3_Init+0xd8>)
 8001502:	f001 fbea 	bl	8002cda <HAL_TIM_IC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x8c>
		Error_Handler();
 800150c:	f000 f9d0 	bl	80018b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	480f      	ldr	r0, [pc, #60]	; (800155c <MX_TIM3_Init+0xd8>)
 8001520:	f002 fa0e 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 800152a:	f000 f9c1 	bl	80018b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800152e:	230a      	movs	r3, #10
 8001530:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001532:	2301      	movs	r3, #1
 8001534:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 4;
 800153a:	2304      	movs	r3, #4
 800153c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_TIM3_Init+0xd8>)
 8001546:	f001 fddd 	bl	8003104 <HAL_TIM_IC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0xd0>
		Error_Handler();
 8001550:	f000 f9ae 	bl	80018b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002b8 	.word	0x200002b8
 8001560:	40000400 	.word	0x40000400

08001564 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_TIM4_Init+0x90>)
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <MX_TIM4_Init+0x94>)
 8001584:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_TIM4_Init+0x90>)
 8001588:	2253      	movs	r2, #83	; 0x53
 800158a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_TIM4_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_TIM4_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_TIM4_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_TIM4_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <MX_TIM4_Init+0x90>)
 80015a6:	f001 fb6d 	bl	8002c84 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM4_Init+0x50>
		Error_Handler();
 80015b0:	f000 f97e 	bl	80018b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_TIM4_Init+0x90>)
 80015c2:	f001 fe3b 	bl	800323c <HAL_TIM_ConfigClockSource>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM4_Init+0x6c>
		Error_Handler();
 80015cc:	f000 f970 	bl	80018b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_TIM4_Init+0x90>)
 80015de:	f002 f9af 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM4_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 80015e8:	f000 f962 	bl	80018b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000234 	.word	0x20000234
 80015f8:	40000800 	.word	0x40000800

080015fc <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_TIM10_Init+0x40>)
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <MX_TIM10_Init+0x44>)
 8001604:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 50 - 1;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_TIM10_Init+0x40>)
 8001608:	2231      	movs	r2, #49	; 0x31
 800160a:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_TIM10_Init+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 0xffff - 1;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_TIM10_Init+0x40>)
 8001614:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001618:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_TIM10_Init+0x40>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_TIM10_Init+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM10_Init+0x40>)
 8001628:	f001 fb2c 	bl	8002c84 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM10_Init+0x3a>
		Error_Handler();
 8001632:	f000 f93d 	bl	80018b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000274 	.word	0x20000274
 8001640:	40014400 	.word	0x40014400

08001644 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001654:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f002 f9e2 	bl	8003a44 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001686:	f000 f913 	bl	80018b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002fc 	.word	0x200002fc
 8001694:	40011000 	.word	0x40011000

08001698 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_USART2_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f002 f9b8 	bl	8003a44 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80016da:	f000 f8e9 	bl	80018b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000340 	.word	0x20000340
 80016e8:	40004400 	.word	0x40004400

080016ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <MX_GPIO_Init+0xec>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_GPIO_Init+0xec>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_GPIO_Init+0xec>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | LD2_Pin | TRIG_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001778:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_GPIO_Init+0xf0>)
 800177a:	f000 fded 	bl	8002358 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800177e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001782:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_GPIO_Init+0xf4>)
 8001786:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4814      	ldr	r0, [pc, #80]	; (80017e4 <MX_GPIO_Init+0xf8>)
 8001794:	f000 fc46 	bl	8002024 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 LD2_Pin TRIG_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | LD2_Pin | TRIG_Pin;
 8001798:	f44f 7391 	mov.w	r3, #290	; 0x122
 800179c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <MX_GPIO_Init+0xf0>)
 80017b2:	f000 fc37 	bl	8002024 <HAL_GPIO_Init>

	/*Configure GPIO pin : FLOAT_Pin */
	GPIO_InitStruct.Pin = FLOAT_Pin;
 80017b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(FLOAT_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_GPIO_Init+0xfc>)
 80017cc:	f000 fc2a 	bl	8002024 <HAL_GPIO_Init>

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	10210000 	.word	0x10210000
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020400 	.word	0x40020400

080017ec <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	if (uSec < 2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d801      	bhi.n	80017fe <usDelay+0x12>
		uSec = 2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	607b      	str	r3, [r7, #4]
	TIM4->ARR = uSec - 1;
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <usDelay+0x60>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM4->EGR = 1;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <usDelay+0x60>)
 8001808:	2201      	movs	r2, #1
 800180a:	615a      	str	r2, [r3, #20]
	TIM4->SR &= ~1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <usDelay+0x60>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <usDelay+0x60>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6113      	str	r3, [r2, #16]
	TIM4->CR1 |= 1;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <usDelay+0x60>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <usDelay+0x60>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]
	while ((TIM4->SR & 0x0001) != 1)
 8001824:	bf00      	nop
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <usDelay+0x60>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d1f9      	bne.n	8001826 <usDelay+0x3a>
		;
	TIM4->SR &= ~(0x0001);
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <usDelay+0x60>)
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <usDelay+0x60>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6113      	str	r3, [r2, #16]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40000800 	.word	0x40000800

08001850 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

	if (captureIdx == 0) {
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <HAL_TIM_IC_CaptureCallback+0x26>
		edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f001 fda2 	bl	80033ac <HAL_TIM_ReadCapturedValue>
 8001868:	4602      	mov	r2, r0
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_TIM_IC_CaptureCallback+0x54>)
 800186c:	601a      	str	r2, [r3, #0]
		captureIdx = 1;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
	} else if (captureIdx == 1) {
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		captureIdx = 0;
		icFlag = 1;
	}
}
 8001874:	e010      	b.n	8001898 <HAL_TIM_IC_CaptureCallback+0x48>
	} else if (captureIdx == 1) {
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10c      	bne.n	8001898 <HAL_TIM_IC_CaptureCallback+0x48>
		edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f001 fd93 	bl	80033ac <HAL_TIM_ReadCapturedValue>
 8001886:	4602      	mov	r2, r0
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_TIM_IC_CaptureCallback+0x58>)
 800188a:	601a      	str	r2, [r3, #0]
		captureIdx = 0;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
		icFlag = 1;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000215 	.word	0x20000215
 80018a4:	20000218 	.word	0x20000218
 80018a8:	2000021c 	.word	0x2000021c
 80018ac:	20000214 	.word	0x20000214

080018b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018b6:	e7fe      	b.n	80018b6 <Error_Handler+0x6>

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_MspInit+0x4c>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	; 0x44
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x4c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018f6:	2007      	movs	r0, #7
 80018f8:	f000 fb30 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <HAL_TIM_Base_MspInit+0xe4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d134      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001962:	2340      	movs	r3, #64	; 0x40
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001972:	2302      	movs	r3, #2
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	481d      	ldr	r0, [pc, #116]	; (80019f4 <HAL_TIM_Base_MspInit+0xec>)
 800197e:	f000 fb51 	bl	8002024 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201d      	movs	r0, #29
 8001988:	f000 faf3 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800198c:	201d      	movs	r0, #29
 800198e:	f000 fb0c 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001992:	e026      	b.n	80019e2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_TIM_Base_MspInit+0xf0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10e      	bne.n	80019bc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
}
 80019ba:	e012      	b.n	80019e2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM10)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_TIM_Base_MspInit+0xf4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10d      	bne.n	80019e2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	bf00      	nop
 80019e4:	3730      	adds	r7, #48	; 0x30
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40000800 	.word	0x40000800
 80019fc:	40014400 	.word	0x40014400

08001a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <HAL_UART_MspInit+0x108>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d135      	bne.n	8001a8e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a38      	ldr	r2, [pc, #224]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a31      	ldr	r2, [pc, #196]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4826      	ldr	r0, [pc, #152]	; (8001b10 <HAL_UART_MspInit+0x110>)
 8001a78:	f000 fad4 	bl	8002024 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2025      	movs	r0, #37	; 0x25
 8001a82:	f000 fa76 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a86:	2025      	movs	r0, #37	; 0x25
 8001a88:	f000 fa8f 	bl	8001faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a8c:	e038      	b.n	8001b00 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x114>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d133      	bne.n	8001b00 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x10c>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ad0:	230c      	movs	r3, #12
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <HAL_UART_MspInit+0x110>)
 8001aec:	f000 fa9a 	bl	8002024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2026      	movs	r0, #38	; 0x26
 8001af6:	f000 fa3c 	bl	8001f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001afa:	2026      	movs	r0, #38	; 0x26
 8001afc:	f000 fa55 	bl	8001faa <HAL_NVIC_EnableIRQ>
}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40004400 	.word	0x40004400

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 f8e8 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM3_IRQHandler+0x10>)
 8001b72:	f001 f9bf 	bl	8002ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200002b8 	.word	0x200002b8

08001b80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART1_IRQHandler+0x10>)
 8001b86:	f002 f899 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200002fc 	.word	0x200002fc

08001b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <USART2_IRQHandler+0x10>)
 8001b9a:	f002 f88f 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000340 	.word	0x20000340

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f002 fe6c 	bl	80048b4 <__errno>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	230c      	movs	r3, #12
 8001be0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20020000 	.word	0x20020000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	20000228 	.word	0x20000228
 8001c10:	20000390 	.word	0x20000390

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <SystemInit+0x28>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <SystemInit+0x28>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SystemInit+0x28>)
 8001c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff ffd3 	bl	8001c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f002 fe27 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fa8d 	bl	8001190 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c7c:	08006c48 	.word	0x08006c48
  ldr  r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c84:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001c88:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001c8c:	2000038c 	.word	0x2000038c

08001c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_Init+0x40>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_Init+0x40>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_Init+0x40>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f94d 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fdf6 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f965 	bl	8001fc6 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 f92d 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	20000020 	.word	0x20000020
 8001d34:	2000001c 	.word	0x2000001c

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000020 	.word	0x20000020
 8001d5c:	20000384 	.word	0x20000384

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000384 	.word	0x20000384

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff ffee 	bl	8001d60 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_Delay+0x40>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000020 	.word	0x20000020

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	; (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7ff ff8e 	bl	8001e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff29 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff3e 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff8e 	bl	8001eb0 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5d 	bl	8001e5c <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff31 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ffa2 	bl	8001f18 <SysTick_Config>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d004      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e00c      	b.n	8002016 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2205      	movs	r2, #5
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e159      	b.n	80022f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8148 	bne.w	80022ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00b      	beq.n	800207e <HAL_GPIO_Init+0x5a>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002072:	2b11      	cmp	r3, #17
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b12      	cmp	r3, #18
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0xfc>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b12      	cmp	r3, #18
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a2 	beq.w	80022ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b56      	ldr	r3, [pc, #344]	; (8002308 <HAL_GPIO_Init+0x2e4>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a55      	ldr	r2, [pc, #340]	; (8002308 <HAL_GPIO_Init+0x2e4>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_GPIO_Init+0x2e4>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_GPIO_Init+0x2e8>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2ec>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x202>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a47      	ldr	r2, [pc, #284]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x1fe>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a46      	ldr	r2, [pc, #280]	; (8002318 <HAL_GPIO_Init+0x2f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x1fa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_GPIO_Init+0x2f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x1f6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a44      	ldr	r2, [pc, #272]	; (8002320 <HAL_GPIO_Init+0x2fc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x1f2>
 8002212:	2304      	movs	r3, #4
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x204>
 8002216:	2307      	movs	r3, #7
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x204>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x204>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x204>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x204>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4934      	ldr	r1, [pc, #208]	; (800230c <HAL_GPIO_Init+0x2e8>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002246:	4b37      	ldr	r3, [pc, #220]	; (8002324 <HAL_GPIO_Init+0x300>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226a:	4a2e      	ldr	r2, [pc, #184]	; (8002324 <HAL_GPIO_Init+0x300>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_GPIO_Init+0x300>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002294:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_GPIO_Init+0x300>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_GPIO_Init+0x300>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_GPIO_Init+0x300>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_GPIO_Init+0x300>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_GPIO_Init+0x300>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f aea2 	bls.w	8002040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e001      	b.n	800234a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002374:	e003      	b.n	800237e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	401a      	ands	r2, r3
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d104      	bne.n	80023ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e25b      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d075      	beq.n	80024ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023de:	4ba3      	ldr	r3, [pc, #652]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d00c      	beq.n	8002404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ea:	4ba0      	ldr	r3, [pc, #640]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d112      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f6:	4b9d      	ldr	r3, [pc, #628]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002402:	d10b      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	4b99      	ldr	r3, [pc, #612]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d05b      	beq.n	80024c8 <HAL_RCC_OscConfig+0x108>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d157      	bne.n	80024c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e236      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x74>
 8002426:	4b91      	ldr	r3, [pc, #580]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a90      	ldr	r2, [pc, #576]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b8b      	ldr	r3, [pc, #556]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a8a      	ldr	r2, [pc, #552]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a87      	ldr	r2, [pc, #540]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002458:	4b84      	ldr	r3, [pc, #528]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a83      	ldr	r2, [pc, #524]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fc72 	bl	8001d60 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fc6e 	bl	8001d60 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1fb      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xc0>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fc5e 	bl	8001d60 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fc5a 	bl	8001d60 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1e7      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b6c      	ldr	r3, [pc, #432]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0xe8>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x152>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1bb      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4952      	ldr	r1, [pc, #328]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_OscConfig+0x2b0>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7ff fc13 	bl	8001d60 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253e:	f7ff fc0f 	bl	8001d60 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e19c      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4940      	ldr	r1, [pc, #256]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <HAL_RCC_OscConfig+0x2b0>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff fbf2 	bl	8001d60 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff fbee 	bl	8001d60 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e17b      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d030      	beq.n	800260c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCC_OscConfig+0x2b4>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7ff fbd2 	bl	8001d60 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c0:	f7ff fbce 	bl	8001d60 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e15b      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x200>
 80025de:	e015      	b.n	800260c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_OscConfig+0x2b4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7ff fbbb 	bl	8001d60 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ee:	f7ff fbb7 	bl	8001d60 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e144      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f0      	bne.n	80025ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a0 	beq.w	800275a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCC_OscConfig+0x2ac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x2b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d121      	bne.n	800269a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x2b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_RCC_OscConfig+0x2b8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7ff fb7d 	bl	8001d60 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e011      	b.n	800268e <HAL_RCC_OscConfig+0x2ce>
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	42470000 	.word	0x42470000
 8002674:	42470e80 	.word	0x42470e80
 8002678:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7ff fb70 	bl	8001d60 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0fd      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x4d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	e01c      	b.n	80026ea <HAL_RCC_OscConfig+0x32a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x312>
 80026b8:	4b77      	ldr	r3, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a76      	ldr	r2, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	4b74      	ldr	r3, [pc, #464]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e00b      	b.n	80026ea <HAL_RCC_OscConfig+0x32a>
 80026d2:	4b71      	ldr	r3, [pc, #452]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a70      	ldr	r2, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b6e      	ldr	r3, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a6d      	ldr	r2, [pc, #436]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d015      	beq.n	800271e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7ff fb35 	bl	8001d60 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7ff fb31 	bl	8001d60 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0bc      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ee      	beq.n	80026fa <HAL_RCC_OscConfig+0x33a>
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7ff fb1f 	bl	8001d60 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7ff fb1b 	bl	8001d60 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0a6      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b52      	ldr	r3, [pc, #328]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a51      	ldr	r2, [pc, #324]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8092 	beq.w	8002888 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d05c      	beq.n	800282a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d141      	bne.n	80027fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b48      	ldr	r3, [pc, #288]	; (800289c <HAL_RCC_OscConfig+0x4dc>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7ff faef 	bl	8001d60 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002786:	f7ff faeb 	bl	8001d60 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e078      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	3b01      	subs	r3, #1
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	061b      	lsls	r3, r3, #24
 80027c8:	4933      	ldr	r1, [pc, #204]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ce:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7ff fac4 	bl	8001d60 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff fac0 	bl	8001d60 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04d      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x41c>
 80027fa:	e045      	b.n	8002888 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_OscConfig+0x4dc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff faad 	bl	8001d60 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff faa9 	bl	8001d60 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e036      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x44a>
 8002828:	e02e      	b.n	8002888 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e029      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	429a      	cmp	r2, r3
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d115      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002864:	4293      	cmp	r3, r2
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40007000 	.word	0x40007000
 8002898:	40023800 	.word	0x40023800
 800289c:	42470060 	.word	0x42470060

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0cc      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90c      	bls.n	80028dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	494d      	ldr	r1, [pc, #308]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d044      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e067      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4934      	ldr	r1, [pc, #208]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7ff f9e6 	bl	8001d60 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7ff f9e2 	bl	8001d60 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4916      	ldr	r1, [pc, #88]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490e      	ldr	r1, [pc, #56]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a26:	f000 f821 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f946 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	080069c0 	.word	0x080069c0
 8002a64:	20000018 	.word	0x20000018
 8002a68:	2000001c 	.word	0x2000001c

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x32>
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x38>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 80b4 	bne.w	8002c00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a9a:	60bb      	str	r3, [r7, #8]
       break;
 8002a9c:	e0b3      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002aa0:	60bb      	str	r3, [r7, #8]
      break;
 8002aa2:	e0b0      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aae:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d04a      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	ea03 0501 	and.w	r5, r3, r1
 8002ad0:	ea04 0602 	and.w	r6, r4, r2
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	4632      	mov	r2, r6
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f04f 0400 	mov.w	r4, #0
 8002ae0:	0154      	lsls	r4, r2, #5
 8002ae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ae6:	014b      	lsls	r3, r1, #5
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4622      	mov	r2, r4
 8002aec:	1b49      	subs	r1, r1, r5
 8002aee:	eb62 0206 	sbc.w	r2, r2, r6
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f04f 0400 	mov.w	r4, #0
 8002afa:	0194      	lsls	r4, r2, #6
 8002afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b00:	018b      	lsls	r3, r1, #6
 8002b02:	1a5b      	subs	r3, r3, r1
 8002b04:	eb64 0402 	sbc.w	r4, r4, r2
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	00e2      	lsls	r2, r4, #3
 8002b12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b16:	00d9      	lsls	r1, r3, #3
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	195b      	adds	r3, r3, r5
 8002b1e:	eb44 0406 	adc.w	r4, r4, r6
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	0262      	lsls	r2, r4, #9
 8002b2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b30:	0259      	lsls	r1, r3, #9
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	4621      	mov	r1, r4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f04f 0400 	mov.w	r4, #0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	f7fe f888 	bl	8000c58 <__aeabi_uldivmod>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e049      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	ea03 0501 	and.w	r5, r3, r1
 8002b66:	ea04 0602 	and.w	r6, r4, r2
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	4632      	mov	r2, r6
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	0154      	lsls	r4, r2, #5
 8002b78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b7c:	014b      	lsls	r3, r1, #5
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4622      	mov	r2, r4
 8002b82:	1b49      	subs	r1, r1, r5
 8002b84:	eb62 0206 	sbc.w	r2, r2, r6
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f04f 0400 	mov.w	r4, #0
 8002b90:	0194      	lsls	r4, r2, #6
 8002b92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b96:	018b      	lsls	r3, r1, #6
 8002b98:	1a5b      	subs	r3, r3, r1
 8002b9a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	00e2      	lsls	r2, r4, #3
 8002ba8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bac:	00d9      	lsls	r1, r3, #3
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	195b      	adds	r3, r3, r5
 8002bb4:	eb44 0406 	adc.w	r4, r4, r6
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	02a2      	lsls	r2, r4, #10
 8002bc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bc6:	0299      	lsls	r1, r3, #10
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4614      	mov	r4, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	4621      	mov	r1, r4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4623      	mov	r3, r4
 8002bda:	f7fe f83d 	bl	8000c58 <__aeabi_uldivmod>
 8002bde:	4603      	mov	r3, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c02:	60bb      	str	r3, [r7, #8]
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	68bb      	ldr	r3, [r7, #8]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000018 	.word	0x20000018

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	080069d0 	.word	0x080069d0

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c60:	f7ff ffdc 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c64:	4601      	mov	r1, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0b5b      	lsrs	r3, r3, #13
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	080069d0 	.word	0x080069d0

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e01d      	b.n	8002cd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fe2c 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fbde 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01d      	b.n	8002d28 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f815 	bl	8002d30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 fbb3 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d841      	bhi.n	8002dd8 <HAL_TIM_IC_Start_IT+0x94>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <HAL_TIM_IC_Start_IT+0x18>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002dd9 	.word	0x08002dd9
 8002d64:	08002dd9 	.word	0x08002dd9
 8002d68:	08002dd9 	.word	0x08002dd9
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002dd9 	.word	0x08002dd9
 8002d74:	08002dd9 	.word	0x08002dd9
 8002d78:	08002dd9 	.word	0x08002dd9
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002dd9 	.word	0x08002dd9
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002dd9 	.word	0x08002dd9
 8002d8c:	08002dc7 	.word	0x08002dc7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0202 	orr.w	r2, r2, #2
 8002d9e:	60da      	str	r2, [r3, #12]
      break;
 8002da0:	e01b      	b.n	8002dda <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0204 	orr.w	r2, r2, #4
 8002db0:	60da      	str	r2, [r3, #12]
      break;
 8002db2:	e012      	b.n	8002dda <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0208 	orr.w	r2, r2, #8
 8002dc2:	60da      	str	r2, [r3, #12]
      break;
 8002dc4:	e009      	b.n	8002dda <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0210 	orr.w	r2, r2, #16
 8002dd4:	60da      	str	r2, [r3, #12]
      break;
 8002dd6:	e000      	b.n	8002dda <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002dd8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fd86 	bl	80038f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d007      	beq.n	8002e0a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d841      	bhi.n	8002ea8 <HAL_TIM_IC_Stop_IT+0x94>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_TIM_IC_Stop_IT+0x18>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002ea9 	.word	0x08002ea9
 8002e34:	08002ea9 	.word	0x08002ea9
 8002e38:	08002ea9 	.word	0x08002ea9
 8002e3c:	08002e73 	.word	0x08002e73
 8002e40:	08002ea9 	.word	0x08002ea9
 8002e44:	08002ea9 	.word	0x08002ea9
 8002e48:	08002ea9 	.word	0x08002ea9
 8002e4c:	08002e85 	.word	0x08002e85
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ea9 	.word	0x08002ea9
 8002e58:	08002ea9 	.word	0x08002ea9
 8002e5c:	08002e97 	.word	0x08002e97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0202 	bic.w	r2, r2, #2
 8002e6e:	60da      	str	r2, [r3, #12]
      break;
 8002e70:	e01b      	b.n	8002eaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0204 	bic.w	r2, r2, #4
 8002e80:	60da      	str	r2, [r3, #12]
      break;
 8002e82:	e012      	b.n	8002eaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0208 	bic.w	r2, r2, #8
 8002e92:	60da      	str	r2, [r3, #12]
      break;
 8002e94:	e009      	b.n	8002eaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0210 	bic.w	r2, r2, #16
 8002ea4:	60da      	str	r2, [r3, #12]
      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8002ea8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	6839      	ldr	r1, [r7, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fd1e 	bl	80038f4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_TIM_IC_Stop_IT+0xd4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	f240 4344 	movw	r3, #1092	; 0x444
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IC_Stop_IT+0xd4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0202 	mvn.w	r2, #2
 8002f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fc8a 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa82 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa89 	bl	800345c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0204 	mvn.w	r2, #4
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe fc60 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa58 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fa5f 	bl	800345c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0208 	mvn.w	r2, #8
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe fc36 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa2e 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa35 	bl	800345c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0210 	mvn.w	r2, #16
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2208      	movs	r2, #8
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fc0c 	bl	8001850 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa04 	bl	8003448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa0b 	bl	800345c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0201 	mvn.w	r2, #1
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9de 	bl	8003434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcc6 	bl	8003a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9d0 	bl	8003470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0220 	mvn.w	r2, #32
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fc90 	bl	8003a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_TIM_IC_ConfigChannel+0x1a>
 800311a:	2302      	movs	r3, #2
 800311c:	e08a      	b.n	8003234 <HAL_TIM_IC_ConfigChannel+0x130>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f000 fa1e 	bl	8003584 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 020c 	bic.w	r2, r2, #12
 8003156:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6999      	ldr	r1, [r3, #24]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	619a      	str	r2, [r3, #24]
 800316a:	e05a      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d11c      	bne.n	80031ac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f000 fa96 	bl	80036b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003194:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6999      	ldr	r1, [r3, #24]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	021a      	lsls	r2, r3, #8
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	619a      	str	r2, [r3, #24]
 80031aa:	e03a      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11b      	bne.n	80031ea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f000 fae3 	bl	800378c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 020c 	bic.w	r2, r2, #12
 80031d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
 80031e8:	e01b      	b.n	8003222 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f000 fb03 	bl	8003804 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800320c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIM_ConfigClockSource+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e0a6      	b.n	80033a2 <HAL_TIM_ConfigClockSource+0x166>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d067      	beq.n	800335c <HAL_TIM_ConfigClockSource+0x120>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d80b      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x6c>
 8003290:	2b10      	cmp	r3, #16
 8003292:	d073      	beq.n	800337c <HAL_TIM_ConfigClockSource+0x140>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d802      	bhi.n	800329e <HAL_TIM_ConfigClockSource+0x62>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d06f      	beq.n	800337c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800329c:	e078      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d06c      	beq.n	800337c <HAL_TIM_ConfigClockSource+0x140>
 80032a2:	2b30      	cmp	r3, #48	; 0x30
 80032a4:	d06a      	beq.n	800337c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032a6:	e073      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032a8:	2b70      	cmp	r3, #112	; 0x70
 80032aa:	d00d      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x8c>
 80032ac:	2b70      	cmp	r3, #112	; 0x70
 80032ae:	d804      	bhi.n	80032ba <HAL_TIM_ConfigClockSource+0x7e>
 80032b0:	2b50      	cmp	r3, #80	; 0x50
 80032b2:	d033      	beq.n	800331c <HAL_TIM_ConfigClockSource+0xe0>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d041      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80032b8:	e06a      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032be:	d066      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x152>
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c4:	d017      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80032c6:	e063      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f000 faec 	bl	80038b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
      break;
 80032f4:	e04c      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f000 fad5 	bl	80038b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003318:	609a      	str	r2, [r3, #8]
      break;
 800331a:	e039      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	461a      	mov	r2, r3
 800332a:	f000 f993 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2150      	movs	r1, #80	; 0x50
 8003334:	4618      	mov	r0, r3
 8003336:	f000 faa2 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 800333a:	e029      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	461a      	mov	r2, r3
 800334a:	f000 f9ef 	bl	800372c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2160      	movs	r1, #96	; 0x60
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fa92 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 800335a:	e019      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	461a      	mov	r2, r3
 800336a:	f000 f973 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa82 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 800337a:	e009      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f000 fa79 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 800338c:	e000      	b.n	8003390 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800338e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d831      	bhi.n	8003424 <HAL_TIM_ReadCapturedValue+0x78>
 80033c0:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033fd 	.word	0x080033fd
 80033cc:	08003425 	.word	0x08003425
 80033d0:	08003425 	.word	0x08003425
 80033d4:	08003425 	.word	0x08003425
 80033d8:	08003407 	.word	0x08003407
 80033dc:	08003425 	.word	0x08003425
 80033e0:	08003425 	.word	0x08003425
 80033e4:	08003425 	.word	0x08003425
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003425 	.word	0x08003425
 80033f0:	08003425 	.word	0x08003425
 80033f4:	08003425 	.word	0x08003425
 80033f8:	0800341b 	.word	0x0800341b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	60fb      	str	r3, [r7, #12]

      break;
 8003404:	e00f      	b.n	8003426 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	60fb      	str	r3, [r7, #12]

      break;
 800340e:	e00a      	b.n	8003426 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	60fb      	str	r3, [r7, #12]

      break;
 8003418:	e005      	b.n	8003426 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	60fb      	str	r3, [r7, #12]

      break;
 8003422:	e000      	b.n	8003426 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003424:	bf00      	nop
  }

  return tmpreg;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a34      	ldr	r2, [pc, #208]	; (8003568 <TIM_Base_SetConfig+0xe4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00f      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a2:	d00b      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a31      	ldr	r2, [pc, #196]	; (800356c <TIM_Base_SetConfig+0xe8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d007      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a30      	ldr	r2, [pc, #192]	; (8003570 <TIM_Base_SetConfig+0xec>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <TIM_Base_SetConfig+0xf0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d108      	bne.n	80034ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a25      	ldr	r2, [pc, #148]	; (8003568 <TIM_Base_SetConfig+0xe4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01b      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034dc:	d017      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a22      	ldr	r2, [pc, #136]	; (800356c <TIM_Base_SetConfig+0xe8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <TIM_Base_SetConfig+0xec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00f      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a20      	ldr	r2, [pc, #128]	; (8003574 <TIM_Base_SetConfig+0xf0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <TIM_Base_SetConfig+0xf4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <TIM_Base_SetConfig+0xf8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <TIM_Base_SetConfig+0xfc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <TIM_Base_SetConfig+0xe4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800

08003584 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f023 0201 	bic.w	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a24      	ldr	r2, [pc, #144]	; (8003640 <TIM_TI1_SetConfig+0xbc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <TIM_TI1_SetConfig+0x56>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d00f      	beq.n	80035da <TIM_TI1_SetConfig+0x56>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a21      	ldr	r2, [pc, #132]	; (8003644 <TIM_TI1_SetConfig+0xc0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00b      	beq.n	80035da <TIM_TI1_SetConfig+0x56>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <TIM_TI1_SetConfig+0xc4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <TIM_TI1_SetConfig+0x56>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <TIM_TI1_SetConfig+0xc8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_TI1_SetConfig+0x56>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <TIM_TI1_SetConfig+0xcc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <TIM_TI1_SetConfig+0x5a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <TIM_TI1_SetConfig+0x5c>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e003      	b.n	80035fe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	b2db      	uxtb	r3, r3
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f023 030a 	bic.w	r3, r3, #10
 8003618:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f003 030a 	and.w	r3, r3, #10
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40000c00 	.word	0x40000c00
 8003650:	40014000 	.word	0x40014000

08003654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 030a 	bic.w	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f023 0210 	bic.w	r2, r3, #16
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003704:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	621a      	str	r2, [r3, #32]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 0210 	bic.w	r2, r3, #16
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003756:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	031b      	lsls	r3, r3, #12
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003768:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 0303 	bic.w	r3, r3, #3
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	621a      	str	r2, [r3, #32]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003830:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003842:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	031b      	lsls	r3, r3, #12
 8003848:	b29b      	uxth	r3, r3
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003856:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	031b      	lsls	r3, r3, #12
 800385c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	f043 0307 	orr.w	r3, r3, #7
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2201      	movs	r2, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	43db      	mvns	r3, r3
 8003916:	401a      	ands	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1a      	ldr	r2, [r3, #32]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	431a      	orrs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e050      	b.n	80039fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d018      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d013      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00e      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10c      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40014000 	.word	0x40014000

08003a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e03f      	b.n	8003ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd ffc8 	bl	8001a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fb97 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	f040 8083 	bne.w	8003c06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_UART_Transmit+0x2e>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e07b      	b.n	8003c08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Transmit+0x40>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e074      	b.n	8003c08 <HAL_UART_Transmit+0x12a>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2221      	movs	r2, #33	; 0x21
 8003b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b34:	f7fe f914 	bl	8001d60 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b4e:	e042      	b.n	8003bd6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d122      	bne.n	8003bae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f9b6 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e042      	b.n	8003c08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b94:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	e017      	b.n	8003bd6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	e013      	b.n	8003bd6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f993 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e01f      	b.n	8003c08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	60ba      	str	r2, [r7, #8]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1b7      	bne.n	8003b50 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f97a 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e006      	b.n	8003c08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d140      	bne.n	8003cac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_Receive_IT+0x26>
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e039      	b.n	8003cae <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Receive_IT+0x38>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e032      	b.n	8003cae <HAL_UART_Receive_IT+0x9e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2222      	movs	r2, #34	; 0x22
 8003c6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c86:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0220 	orr.w	r2, r2, #32
 8003ca6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10d      	bne.n	8003d0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_UART_IRQHandler+0x52>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f9d6 	bl	80040b8 <UART_Receive_IT>
      return;
 8003d0c:	e0d1      	b.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80b0 	beq.w	8003e76 <HAL_UART_IRQHandler+0x1ba>
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <HAL_UART_IRQHandler+0x70>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a5 	beq.w	8003e76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_UART_IRQHandler+0x90>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_UART_IRQHandler+0xb0>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	f043 0202 	orr.w	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_UART_IRQHandler+0xd0>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	f043 0204 	orr.w	r2, r3, #4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00f      	beq.n	8003db6 <HAL_UART_IRQHandler+0xfa>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_UART_IRQHandler+0xee>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	f043 0208 	orr.w	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d078      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x11c>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f970 	bl	80040b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_UART_IRQHandler+0x144>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d031      	beq.n	8003e64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8b9 	bl	8003f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d123      	bne.n	8003e5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <HAL_UART_IRQHandler+0x1fc>)
 8003e32:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe f8d0 	bl	8001fde <HAL_DMA_Abort_IT>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e52:	e00e      	b.n	8003e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f83b 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5a:	e00a      	b.n	8003e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f837 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e62:	e006      	b.n	8003e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f833 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e70:	e01e      	b.n	8003eb0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e72:	bf00      	nop
    return;
 8003e74:	e01c      	b.n	8003eb0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_UART_IRQHandler+0x1d6>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8a6 	bl	8003fdc <UART_Transmit_IT>
    return;
 8003e90:	e00f      	b.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8ee 	bl	8004088 <UART_EndTransmit_IT>
    return;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003eb0:	bf00      	nop
  }
}
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08003fb5 	.word	0x08003fb5

08003ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	e02c      	b.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d028      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f04:	f7fd ff2c 	bl	8001d60 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d21d      	bcs.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e00f      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d0c3      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7ff ff7e 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b21      	cmp	r3, #33	; 0x21
 8003fee:	d144      	bne.n	800407a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d11a      	bne.n	8004030 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]
 8004022:	e00e      	b.n	8004042 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]
 800402e:	e008      	b.n	8004042 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	1c59      	adds	r1, r3, #1
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6211      	str	r1, [r2, #32]
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff07 	bl	8003ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b22      	cmp	r3, #34	; 0x22
 80040ca:	d171      	bne.n	80041b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d123      	bne.n	800411e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10e      	bne.n	8004102 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	1c9a      	adds	r2, r3, #2
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004100:	e029      	b.n	8004156 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b29b      	uxth	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
 800411c:	e01b      	b.n	8004156 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6858      	ldr	r0, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	1c59      	adds	r1, r3, #1
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6291      	str	r1, [r2, #40]	; 0x28
 8004136:	b2c2      	uxtb	r2, r0
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e00c      	b.n	8004156 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	1c58      	adds	r0, r3, #1
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	6288      	str	r0, [r1, #40]	; 0x28
 800414e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4619      	mov	r1, r3
 8004164:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004166:	2b00      	cmp	r3, #0
 8004168:	d120      	bne.n	80041ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0220 	bic.w	r2, r2, #32
 8004178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004188:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc fed8 	bl	8000f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e002      	b.n	80041b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041fe:	f023 030c 	bic.w	r3, r3, #12
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	430b      	orrs	r3, r1
 800420a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422a:	f040 818b 	bne.w	8004544 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4ac1      	ldr	r2, [pc, #772]	; (8004538 <UART_SetConfig+0x37c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d005      	beq.n	8004244 <UART_SetConfig+0x88>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4abf      	ldr	r2, [pc, #764]	; (800453c <UART_SetConfig+0x380>)
 800423e:	4293      	cmp	r3, r2
 8004240:	f040 80bd 	bne.w	80043be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7fe fd0a 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8004248:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	461d      	mov	r5, r3
 800424e:	f04f 0600 	mov.w	r6, #0
 8004252:	46a8      	mov	r8, r5
 8004254:	46b1      	mov	r9, r6
 8004256:	eb18 0308 	adds.w	r3, r8, r8
 800425a:	eb49 0409 	adc.w	r4, r9, r9
 800425e:	4698      	mov	r8, r3
 8004260:	46a1      	mov	r9, r4
 8004262:	eb18 0805 	adds.w	r8, r8, r5
 8004266:	eb49 0906 	adc.w	r9, r9, r6
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004276:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800427a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800427e:	4688      	mov	r8, r1
 8004280:	4691      	mov	r9, r2
 8004282:	eb18 0005 	adds.w	r0, r8, r5
 8004286:	eb49 0106 	adc.w	r1, r9, r6
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	461d      	mov	r5, r3
 8004290:	f04f 0600 	mov.w	r6, #0
 8004294:	196b      	adds	r3, r5, r5
 8004296:	eb46 0406 	adc.w	r4, r6, r6
 800429a:	461a      	mov	r2, r3
 800429c:	4623      	mov	r3, r4
 800429e:	f7fc fcdb 	bl	8000c58 <__aeabi_uldivmod>
 80042a2:	4603      	mov	r3, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	461a      	mov	r2, r3
 80042a8:	4ba5      	ldr	r3, [pc, #660]	; (8004540 <UART_SetConfig+0x384>)
 80042aa:	fba3 2302 	umull	r2, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	461d      	mov	r5, r3
 80042b8:	f04f 0600 	mov.w	r6, #0
 80042bc:	46a9      	mov	r9, r5
 80042be:	46b2      	mov	sl, r6
 80042c0:	eb19 0309 	adds.w	r3, r9, r9
 80042c4:	eb4a 040a 	adc.w	r4, sl, sl
 80042c8:	4699      	mov	r9, r3
 80042ca:	46a2      	mov	sl, r4
 80042cc:	eb19 0905 	adds.w	r9, r9, r5
 80042d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e8:	4689      	mov	r9, r1
 80042ea:	4692      	mov	sl, r2
 80042ec:	eb19 0005 	adds.w	r0, r9, r5
 80042f0:	eb4a 0106 	adc.w	r1, sl, r6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	461d      	mov	r5, r3
 80042fa:	f04f 0600 	mov.w	r6, #0
 80042fe:	196b      	adds	r3, r5, r5
 8004300:	eb46 0406 	adc.w	r4, r6, r6
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	f7fc fca6 	bl	8000c58 <__aeabi_uldivmod>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	461a      	mov	r2, r3
 8004312:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <UART_SetConfig+0x384>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a86      	ldr	r2, [pc, #536]	; (8004540 <UART_SetConfig+0x384>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004334:	4498      	add	r8, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	461d      	mov	r5, r3
 800433a:	f04f 0600 	mov.w	r6, #0
 800433e:	46a9      	mov	r9, r5
 8004340:	46b2      	mov	sl, r6
 8004342:	eb19 0309 	adds.w	r3, r9, r9
 8004346:	eb4a 040a 	adc.w	r4, sl, sl
 800434a:	4699      	mov	r9, r3
 800434c:	46a2      	mov	sl, r4
 800434e:	eb19 0905 	adds.w	r9, r9, r5
 8004352:	eb4a 0a06 	adc.w	sl, sl, r6
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800436a:	4689      	mov	r9, r1
 800436c:	4692      	mov	sl, r2
 800436e:	eb19 0005 	adds.w	r0, r9, r5
 8004372:	eb4a 0106 	adc.w	r1, sl, r6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	461d      	mov	r5, r3
 800437c:	f04f 0600 	mov.w	r6, #0
 8004380:	196b      	adds	r3, r5, r5
 8004382:	eb46 0406 	adc.w	r4, r6, r6
 8004386:	461a      	mov	r2, r3
 8004388:	4623      	mov	r3, r4
 800438a:	f7fc fc65 	bl	8000c58 <__aeabi_uldivmod>
 800438e:	4603      	mov	r3, r0
 8004390:	460c      	mov	r4, r1
 8004392:	461a      	mov	r2, r3
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <UART_SetConfig+0x384>)
 8004396:	fba3 1302 	umull	r1, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2164      	movs	r1, #100	; 0x64
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <UART_SetConfig+0x384>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 0207 	and.w	r2, r3, #7
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4442      	add	r2, r8
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e26f      	b.n	800489e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043be:	f7fe fc39 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 80043c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	461d      	mov	r5, r3
 80043c8:	f04f 0600 	mov.w	r6, #0
 80043cc:	46a8      	mov	r8, r5
 80043ce:	46b1      	mov	r9, r6
 80043d0:	eb18 0308 	adds.w	r3, r8, r8
 80043d4:	eb49 0409 	adc.w	r4, r9, r9
 80043d8:	4698      	mov	r8, r3
 80043da:	46a1      	mov	r9, r4
 80043dc:	eb18 0805 	adds.w	r8, r8, r5
 80043e0:	eb49 0906 	adc.w	r9, r9, r6
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f8:	4688      	mov	r8, r1
 80043fa:	4691      	mov	r9, r2
 80043fc:	eb18 0005 	adds.w	r0, r8, r5
 8004400:	eb49 0106 	adc.w	r1, r9, r6
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	461d      	mov	r5, r3
 800440a:	f04f 0600 	mov.w	r6, #0
 800440e:	196b      	adds	r3, r5, r5
 8004410:	eb46 0406 	adc.w	r4, r6, r6
 8004414:	461a      	mov	r2, r3
 8004416:	4623      	mov	r3, r4
 8004418:	f7fc fc1e 	bl	8000c58 <__aeabi_uldivmod>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	461a      	mov	r2, r3
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <UART_SetConfig+0x384>)
 8004424:	fba3 2302 	umull	r2, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	461d      	mov	r5, r3
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	46a9      	mov	r9, r5
 8004438:	46b2      	mov	sl, r6
 800443a:	eb19 0309 	adds.w	r3, r9, r9
 800443e:	eb4a 040a 	adc.w	r4, sl, sl
 8004442:	4699      	mov	r9, r3
 8004444:	46a2      	mov	sl, r4
 8004446:	eb19 0905 	adds.w	r9, r9, r5
 800444a:	eb4a 0a06 	adc.w	sl, sl, r6
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004462:	4689      	mov	r9, r1
 8004464:	4692      	mov	sl, r2
 8004466:	eb19 0005 	adds.w	r0, r9, r5
 800446a:	eb4a 0106 	adc.w	r1, sl, r6
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	461d      	mov	r5, r3
 8004474:	f04f 0600 	mov.w	r6, #0
 8004478:	196b      	adds	r3, r5, r5
 800447a:	eb46 0406 	adc.w	r4, r6, r6
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	f7fc fbe9 	bl	8000c58 <__aeabi_uldivmod>
 8004486:	4603      	mov	r3, r0
 8004488:	460c      	mov	r4, r1
 800448a:	461a      	mov	r2, r3
 800448c:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <UART_SetConfig+0x384>)
 800448e:	fba3 1302 	umull	r1, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2164      	movs	r1, #100	; 0x64
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <UART_SetConfig+0x384>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ae:	4498      	add	r8, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	461d      	mov	r5, r3
 80044b4:	f04f 0600 	mov.w	r6, #0
 80044b8:	46a9      	mov	r9, r5
 80044ba:	46b2      	mov	sl, r6
 80044bc:	eb19 0309 	adds.w	r3, r9, r9
 80044c0:	eb4a 040a 	adc.w	r4, sl, sl
 80044c4:	4699      	mov	r9, r3
 80044c6:	46a2      	mov	sl, r4
 80044c8:	eb19 0905 	adds.w	r9, r9, r5
 80044cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e4:	4689      	mov	r9, r1
 80044e6:	4692      	mov	sl, r2
 80044e8:	eb19 0005 	adds.w	r0, r9, r5
 80044ec:	eb4a 0106 	adc.w	r1, sl, r6
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	461d      	mov	r5, r3
 80044f6:	f04f 0600 	mov.w	r6, #0
 80044fa:	196b      	adds	r3, r5, r5
 80044fc:	eb46 0406 	adc.w	r4, r6, r6
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	f7fc fba8 	bl	8000c58 <__aeabi_uldivmod>
 8004508:	4603      	mov	r3, r0
 800450a:	460c      	mov	r4, r1
 800450c:	461a      	mov	r2, r3
 800450e:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <UART_SetConfig+0x384>)
 8004510:	fba3 1302 	umull	r1, r3, r3, r2
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	2164      	movs	r1, #100	; 0x64
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	3332      	adds	r3, #50	; 0x32
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <UART_SetConfig+0x384>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f003 0207 	and.w	r2, r3, #7
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4442      	add	r2, r8
 8004534:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004536:	e1b2      	b.n	800489e <UART_SetConfig+0x6e2>
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4ad7      	ldr	r2, [pc, #860]	; (80048a8 <UART_SetConfig+0x6ec>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d005      	beq.n	800455a <UART_SetConfig+0x39e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4ad6      	ldr	r2, [pc, #856]	; (80048ac <UART_SetConfig+0x6f0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	f040 80d1 	bne.w	80046fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800455a:	f7fe fb7f 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 800455e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	469a      	mov	sl, r3
 8004564:	f04f 0b00 	mov.w	fp, #0
 8004568:	46d0      	mov	r8, sl
 800456a:	46d9      	mov	r9, fp
 800456c:	eb18 0308 	adds.w	r3, r8, r8
 8004570:	eb49 0409 	adc.w	r4, r9, r9
 8004574:	4698      	mov	r8, r3
 8004576:	46a1      	mov	r9, r4
 8004578:	eb18 080a 	adds.w	r8, r8, sl
 800457c:	eb49 090b 	adc.w	r9, r9, fp
 8004580:	f04f 0100 	mov.w	r1, #0
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004590:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004594:	4688      	mov	r8, r1
 8004596:	4691      	mov	r9, r2
 8004598:	eb1a 0508 	adds.w	r5, sl, r8
 800459c:	eb4b 0609 	adc.w	r6, fp, r9
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	f04f 0400 	mov.w	r4, #0
 80045b2:	0094      	lsls	r4, r2, #2
 80045b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b8:	008b      	lsls	r3, r1, #2
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	4631      	mov	r1, r6
 80045c2:	f7fc fb49 	bl	8000c58 <__aeabi_uldivmod>
 80045c6:	4603      	mov	r3, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	461a      	mov	r2, r3
 80045cc:	4bb8      	ldr	r3, [pc, #736]	; (80048b0 <UART_SetConfig+0x6f4>)
 80045ce:	fba3 2302 	umull	r2, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	469b      	mov	fp, r3
 80045dc:	f04f 0c00 	mov.w	ip, #0
 80045e0:	46d9      	mov	r9, fp
 80045e2:	46e2      	mov	sl, ip
 80045e4:	eb19 0309 	adds.w	r3, r9, r9
 80045e8:	eb4a 040a 	adc.w	r4, sl, sl
 80045ec:	4699      	mov	r9, r3
 80045ee:	46a2      	mov	sl, r4
 80045f0:	eb19 090b 	adds.w	r9, r9, fp
 80045f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004604:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004608:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460c:	4689      	mov	r9, r1
 800460e:	4692      	mov	sl, r2
 8004610:	eb1b 0509 	adds.w	r5, fp, r9
 8004614:	eb4c 060a 	adc.w	r6, ip, sl
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4619      	mov	r1, r3
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	f04f 0400 	mov.w	r4, #0
 800462a:	0094      	lsls	r4, r2, #2
 800462c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004630:	008b      	lsls	r3, r1, #2
 8004632:	461a      	mov	r2, r3
 8004634:	4623      	mov	r3, r4
 8004636:	4628      	mov	r0, r5
 8004638:	4631      	mov	r1, r6
 800463a:	f7fc fb0d 	bl	8000c58 <__aeabi_uldivmod>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	461a      	mov	r2, r3
 8004644:	4b9a      	ldr	r3, [pc, #616]	; (80048b0 <UART_SetConfig+0x6f4>)
 8004646:	fba3 1302 	umull	r1, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2164      	movs	r1, #100	; 0x64
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	; 0x32
 8004658:	4a95      	ldr	r2, [pc, #596]	; (80048b0 <UART_SetConfig+0x6f4>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	4498      	add	r8, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	469b      	mov	fp, r3
 800466a:	f04f 0c00 	mov.w	ip, #0
 800466e:	46d9      	mov	r9, fp
 8004670:	46e2      	mov	sl, ip
 8004672:	eb19 0309 	adds.w	r3, r9, r9
 8004676:	eb4a 040a 	adc.w	r4, sl, sl
 800467a:	4699      	mov	r9, r3
 800467c:	46a2      	mov	sl, r4
 800467e:	eb19 090b 	adds.w	r9, r9, fp
 8004682:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004692:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004696:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800469a:	4689      	mov	r9, r1
 800469c:	4692      	mov	sl, r2
 800469e:	eb1b 0509 	adds.w	r5, fp, r9
 80046a2:	eb4c 060a 	adc.w	r6, ip, sl
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	0094      	lsls	r4, r2, #2
 80046ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046be:	008b      	lsls	r3, r1, #2
 80046c0:	461a      	mov	r2, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	4631      	mov	r1, r6
 80046c8:	f7fc fac6 	bl	8000c58 <__aeabi_uldivmod>
 80046cc:	4603      	mov	r3, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	461a      	mov	r2, r3
 80046d2:	4b77      	ldr	r3, [pc, #476]	; (80048b0 <UART_SetConfig+0x6f4>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a72      	ldr	r2, [pc, #456]	; (80048b0 <UART_SetConfig+0x6f4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4442      	add	r2, r8
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	e0d0      	b.n	800489e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7fe fa9a 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8004700:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	469a      	mov	sl, r3
 8004706:	f04f 0b00 	mov.w	fp, #0
 800470a:	46d0      	mov	r8, sl
 800470c:	46d9      	mov	r9, fp
 800470e:	eb18 0308 	adds.w	r3, r8, r8
 8004712:	eb49 0409 	adc.w	r4, r9, r9
 8004716:	4698      	mov	r8, r3
 8004718:	46a1      	mov	r9, r4
 800471a:	eb18 080a 	adds.w	r8, r8, sl
 800471e:	eb49 090b 	adc.w	r9, r9, fp
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800472e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004732:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004736:	4688      	mov	r8, r1
 8004738:	4691      	mov	r9, r2
 800473a:	eb1a 0508 	adds.w	r5, sl, r8
 800473e:	eb4b 0609 	adc.w	r6, fp, r9
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	0094      	lsls	r4, r2, #2
 8004756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800475a:	008b      	lsls	r3, r1, #2
 800475c:	461a      	mov	r2, r3
 800475e:	4623      	mov	r3, r4
 8004760:	4628      	mov	r0, r5
 8004762:	4631      	mov	r1, r6
 8004764:	f7fc fa78 	bl	8000c58 <__aeabi_uldivmod>
 8004768:	4603      	mov	r3, r0
 800476a:	460c      	mov	r4, r1
 800476c:	461a      	mov	r2, r3
 800476e:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <UART_SetConfig+0x6f4>)
 8004770:	fba3 2302 	umull	r2, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	469b      	mov	fp, r3
 800477e:	f04f 0c00 	mov.w	ip, #0
 8004782:	46d9      	mov	r9, fp
 8004784:	46e2      	mov	sl, ip
 8004786:	eb19 0309 	adds.w	r3, r9, r9
 800478a:	eb4a 040a 	adc.w	r4, sl, sl
 800478e:	4699      	mov	r9, r3
 8004790:	46a2      	mov	sl, r4
 8004792:	eb19 090b 	adds.w	r9, r9, fp
 8004796:	eb4a 0a0c 	adc.w	sl, sl, ip
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047ae:	4689      	mov	r9, r1
 80047b0:	4692      	mov	sl, r2
 80047b2:	eb1b 0509 	adds.w	r5, fp, r9
 80047b6:	eb4c 060a 	adc.w	r6, ip, sl
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	0094      	lsls	r4, r2, #2
 80047ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	4631      	mov	r1, r6
 80047dc:	f7fc fa3c 	bl	8000c58 <__aeabi_uldivmod>
 80047e0:	4603      	mov	r3, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b32      	ldr	r3, [pc, #200]	; (80048b0 <UART_SetConfig+0x6f4>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a2d      	ldr	r2, [pc, #180]	; (80048b0 <UART_SetConfig+0x6f4>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	4498      	add	r8, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	469b      	mov	fp, r3
 800480c:	f04f 0c00 	mov.w	ip, #0
 8004810:	46d9      	mov	r9, fp
 8004812:	46e2      	mov	sl, ip
 8004814:	eb19 0309 	adds.w	r3, r9, r9
 8004818:	eb4a 040a 	adc.w	r4, sl, sl
 800481c:	4699      	mov	r9, r3
 800481e:	46a2      	mov	sl, r4
 8004820:	eb19 090b 	adds.w	r9, r9, fp
 8004824:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800483c:	4689      	mov	r9, r1
 800483e:	4692      	mov	sl, r2
 8004840:	eb1b 0509 	adds.w	r5, fp, r9
 8004844:	eb4c 060a 	adc.w	r6, ip, sl
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f04f 0400 	mov.w	r4, #0
 800485a:	0094      	lsls	r4, r2, #2
 800485c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004860:	008b      	lsls	r3, r1, #2
 8004862:	461a      	mov	r2, r3
 8004864:	4623      	mov	r3, r4
 8004866:	4628      	mov	r0, r5
 8004868:	4631      	mov	r1, r6
 800486a:	f7fc f9f5 	bl	8000c58 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	461a      	mov	r2, r3
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <UART_SetConfig+0x6f4>)
 8004876:	fba3 1302 	umull	r1, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2164      	movs	r1, #100	; 0x64
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <UART_SetConfig+0x6f4>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4442      	add	r2, r8
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	e7ff      	b.n	800489e <UART_SetConfig+0x6e2>
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a8:	40011000 	.word	0x40011000
 80048ac:	40011400 	.word	0x40011400
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000024 	.word	0x20000024

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4e0d      	ldr	r6, [pc, #52]	; (80048f8 <__libc_init_array+0x38>)
 80048c4:	4c0d      	ldr	r4, [pc, #52]	; (80048fc <__libc_init_array+0x3c>)
 80048c6:	1ba4      	subs	r4, r4, r6
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	2500      	movs	r5, #0
 80048cc:	42a5      	cmp	r5, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	4e0b      	ldr	r6, [pc, #44]	; (8004900 <__libc_init_array+0x40>)
 80048d2:	4c0c      	ldr	r4, [pc, #48]	; (8004904 <__libc_init_array+0x44>)
 80048d4:	f002 f85c 	bl	8006990 <_init>
 80048d8:	1ba4      	subs	r4, r4, r6
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	2500      	movs	r5, #0
 80048de:	42a5      	cmp	r5, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048e8:	4798      	blx	r3
 80048ea:	3501      	adds	r5, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f2:	4798      	blx	r3
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	08006c40 	.word	0x08006c40
 80048fc:	08006c40 	.word	0x08006c40
 8004900:	08006c40 	.word	0x08006c40
 8004904:	08006c44 	.word	0x08006c44

08004908 <memset>:
 8004908:	4402      	add	r2, r0
 800490a:	4603      	mov	r3, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <__cvt>:
 8004918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800491c:	ec55 4b10 	vmov	r4, r5, d0
 8004920:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004922:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004926:	2d00      	cmp	r5, #0
 8004928:	460e      	mov	r6, r1
 800492a:	4691      	mov	r9, r2
 800492c:	4619      	mov	r1, r3
 800492e:	bfb8      	it	lt
 8004930:	4622      	movlt	r2, r4
 8004932:	462b      	mov	r3, r5
 8004934:	f027 0720 	bic.w	r7, r7, #32
 8004938:	bfbb      	ittet	lt
 800493a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800493e:	461d      	movlt	r5, r3
 8004940:	2300      	movge	r3, #0
 8004942:	232d      	movlt	r3, #45	; 0x2d
 8004944:	bfb8      	it	lt
 8004946:	4614      	movlt	r4, r2
 8004948:	2f46      	cmp	r7, #70	; 0x46
 800494a:	700b      	strb	r3, [r1, #0]
 800494c:	d004      	beq.n	8004958 <__cvt+0x40>
 800494e:	2f45      	cmp	r7, #69	; 0x45
 8004950:	d100      	bne.n	8004954 <__cvt+0x3c>
 8004952:	3601      	adds	r6, #1
 8004954:	2102      	movs	r1, #2
 8004956:	e000      	b.n	800495a <__cvt+0x42>
 8004958:	2103      	movs	r1, #3
 800495a:	ab03      	add	r3, sp, #12
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	ab02      	add	r3, sp, #8
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4632      	mov	r2, r6
 8004964:	4653      	mov	r3, sl
 8004966:	ec45 4b10 	vmov	d0, r4, r5
 800496a:	f000 fcdd 	bl	8005328 <_dtoa_r>
 800496e:	2f47      	cmp	r7, #71	; 0x47
 8004970:	4680      	mov	r8, r0
 8004972:	d102      	bne.n	800497a <__cvt+0x62>
 8004974:	f019 0f01 	tst.w	r9, #1
 8004978:	d026      	beq.n	80049c8 <__cvt+0xb0>
 800497a:	2f46      	cmp	r7, #70	; 0x46
 800497c:	eb08 0906 	add.w	r9, r8, r6
 8004980:	d111      	bne.n	80049a6 <__cvt+0x8e>
 8004982:	f898 3000 	ldrb.w	r3, [r8]
 8004986:	2b30      	cmp	r3, #48	; 0x30
 8004988:	d10a      	bne.n	80049a0 <__cvt+0x88>
 800498a:	2200      	movs	r2, #0
 800498c:	2300      	movs	r3, #0
 800498e:	4620      	mov	r0, r4
 8004990:	4629      	mov	r1, r5
 8004992:	f7fc f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004996:	b918      	cbnz	r0, 80049a0 <__cvt+0x88>
 8004998:	f1c6 0601 	rsb	r6, r6, #1
 800499c:	f8ca 6000 	str.w	r6, [sl]
 80049a0:	f8da 3000 	ldr.w	r3, [sl]
 80049a4:	4499      	add	r9, r3
 80049a6:	2200      	movs	r2, #0
 80049a8:	2300      	movs	r3, #0
 80049aa:	4620      	mov	r0, r4
 80049ac:	4629      	mov	r1, r5
 80049ae:	f7fc f893 	bl	8000ad8 <__aeabi_dcmpeq>
 80049b2:	b938      	cbnz	r0, 80049c4 <__cvt+0xac>
 80049b4:	2230      	movs	r2, #48	; 0x30
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	454b      	cmp	r3, r9
 80049ba:	d205      	bcs.n	80049c8 <__cvt+0xb0>
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	9103      	str	r1, [sp, #12]
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e7f8      	b.n	80049b6 <__cvt+0x9e>
 80049c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049c8:	9b03      	ldr	r3, [sp, #12]
 80049ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049cc:	eba3 0308 	sub.w	r3, r3, r8
 80049d0:	4640      	mov	r0, r8
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	b004      	add	sp, #16
 80049d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049da <__exponent>:
 80049da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049dc:	2900      	cmp	r1, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	bfba      	itte	lt
 80049e2:	4249      	neglt	r1, r1
 80049e4:	232d      	movlt	r3, #45	; 0x2d
 80049e6:	232b      	movge	r3, #43	; 0x2b
 80049e8:	2909      	cmp	r1, #9
 80049ea:	f804 2b02 	strb.w	r2, [r4], #2
 80049ee:	7043      	strb	r3, [r0, #1]
 80049f0:	dd20      	ble.n	8004a34 <__exponent+0x5a>
 80049f2:	f10d 0307 	add.w	r3, sp, #7
 80049f6:	461f      	mov	r7, r3
 80049f8:	260a      	movs	r6, #10
 80049fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80049fe:	fb06 1115 	mls	r1, r6, r5, r1
 8004a02:	3130      	adds	r1, #48	; 0x30
 8004a04:	2d09      	cmp	r5, #9
 8004a06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8004a0e:	4629      	mov	r1, r5
 8004a10:	dc09      	bgt.n	8004a26 <__exponent+0x4c>
 8004a12:	3130      	adds	r1, #48	; 0x30
 8004a14:	3b02      	subs	r3, #2
 8004a16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a1a:	42bb      	cmp	r3, r7
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	d304      	bcc.n	8004a2a <__exponent+0x50>
 8004a20:	1a10      	subs	r0, r2, r0
 8004a22:	b003      	add	sp, #12
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a26:	4613      	mov	r3, r2
 8004a28:	e7e7      	b.n	80049fa <__exponent+0x20>
 8004a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a2e:	f804 2b01 	strb.w	r2, [r4], #1
 8004a32:	e7f2      	b.n	8004a1a <__exponent+0x40>
 8004a34:	2330      	movs	r3, #48	; 0x30
 8004a36:	4419      	add	r1, r3
 8004a38:	7083      	strb	r3, [r0, #2]
 8004a3a:	1d02      	adds	r2, r0, #4
 8004a3c:	70c1      	strb	r1, [r0, #3]
 8004a3e:	e7ef      	b.n	8004a20 <__exponent+0x46>

08004a40 <_printf_float>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	b08d      	sub	sp, #52	; 0x34
 8004a46:	460c      	mov	r4, r1
 8004a48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004a4c:	4616      	mov	r6, r2
 8004a4e:	461f      	mov	r7, r3
 8004a50:	4605      	mov	r5, r0
 8004a52:	f001 fa21 	bl	8005e98 <_localeconv_r>
 8004a56:	6803      	ldr	r3, [r0, #0]
 8004a58:	9304      	str	r3, [sp, #16]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fb fbc0 	bl	80001e0 <strlen>
 8004a60:	2300      	movs	r3, #0
 8004a62:	930a      	str	r3, [sp, #40]	; 0x28
 8004a64:	f8d8 3000 	ldr.w	r3, [r8]
 8004a68:	9005      	str	r0, [sp, #20]
 8004a6a:	3307      	adds	r3, #7
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	f103 0208 	add.w	r2, r3, #8
 8004a74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a78:	f8d4 b000 	ldr.w	fp, [r4]
 8004a7c:	f8c8 2000 	str.w	r2, [r8]
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a90:	9307      	str	r3, [sp, #28]
 8004a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	4ba7      	ldr	r3, [pc, #668]	; (8004d38 <_printf_float+0x2f8>)
 8004a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa0:	f7fc f84c 	bl	8000b3c <__aeabi_dcmpun>
 8004aa4:	bb70      	cbnz	r0, 8004b04 <_printf_float+0xc4>
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	4ba3      	ldr	r3, [pc, #652]	; (8004d38 <_printf_float+0x2f8>)
 8004aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab0:	f7fc f826 	bl	8000b00 <__aeabi_dcmple>
 8004ab4:	bb30      	cbnz	r0, 8004b04 <_printf_float+0xc4>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4640      	mov	r0, r8
 8004abc:	4649      	mov	r1, r9
 8004abe:	f7fc f815 	bl	8000aec <__aeabi_dcmplt>
 8004ac2:	b110      	cbz	r0, 8004aca <_printf_float+0x8a>
 8004ac4:	232d      	movs	r3, #45	; 0x2d
 8004ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aca:	4a9c      	ldr	r2, [pc, #624]	; (8004d3c <_printf_float+0x2fc>)
 8004acc:	4b9c      	ldr	r3, [pc, #624]	; (8004d40 <_printf_float+0x300>)
 8004ace:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ad2:	bf8c      	ite	hi
 8004ad4:	4690      	movhi	r8, r2
 8004ad6:	4698      	movls	r8, r3
 8004ad8:	2303      	movs	r3, #3
 8004ada:	f02b 0204 	bic.w	r2, fp, #4
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	f04f 0900 	mov.w	r9, #0
 8004ae6:	9700      	str	r7, [sp, #0]
 8004ae8:	4633      	mov	r3, r6
 8004aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8004aec:	4621      	mov	r1, r4
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 f9e6 	bl	8004ec0 <_printf_common>
 8004af4:	3001      	adds	r0, #1
 8004af6:	f040 808d 	bne.w	8004c14 <_printf_float+0x1d4>
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	b00d      	add	sp, #52	; 0x34
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	f7fc f816 	bl	8000b3c <__aeabi_dcmpun>
 8004b10:	b110      	cbz	r0, 8004b18 <_printf_float+0xd8>
 8004b12:	4a8c      	ldr	r2, [pc, #560]	; (8004d44 <_printf_float+0x304>)
 8004b14:	4b8c      	ldr	r3, [pc, #560]	; (8004d48 <_printf_float+0x308>)
 8004b16:	e7da      	b.n	8004ace <_printf_float+0x8e>
 8004b18:	6861      	ldr	r1, [r4, #4]
 8004b1a:	1c4b      	adds	r3, r1, #1
 8004b1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004b20:	a80a      	add	r0, sp, #40	; 0x28
 8004b22:	d13e      	bne.n	8004ba2 <_printf_float+0x162>
 8004b24:	2306      	movs	r3, #6
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004b2e:	ab09      	add	r3, sp, #36	; 0x24
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	ec49 8b10 	vmov	d0, r8, r9
 8004b36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b3a:	6022      	str	r2, [r4, #0]
 8004b3c:	f8cd a004 	str.w	sl, [sp, #4]
 8004b40:	6861      	ldr	r1, [r4, #4]
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7ff fee8 	bl	8004918 <__cvt>
 8004b48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004b4c:	2b47      	cmp	r3, #71	; 0x47
 8004b4e:	4680      	mov	r8, r0
 8004b50:	d109      	bne.n	8004b66 <_printf_float+0x126>
 8004b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b54:	1cd8      	adds	r0, r3, #3
 8004b56:	db02      	blt.n	8004b5e <_printf_float+0x11e>
 8004b58:	6862      	ldr	r2, [r4, #4]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	dd47      	ble.n	8004bee <_printf_float+0x1ae>
 8004b5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b62:	fa5f fa8a 	uxtb.w	sl, sl
 8004b66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b6c:	d824      	bhi.n	8004bb8 <_printf_float+0x178>
 8004b6e:	3901      	subs	r1, #1
 8004b70:	4652      	mov	r2, sl
 8004b72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b76:	9109      	str	r1, [sp, #36]	; 0x24
 8004b78:	f7ff ff2f 	bl	80049da <__exponent>
 8004b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b7e:	1813      	adds	r3, r2, r0
 8004b80:	2a01      	cmp	r2, #1
 8004b82:	4681      	mov	r9, r0
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	dc02      	bgt.n	8004b8e <_printf_float+0x14e>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	07d1      	lsls	r1, r2, #31
 8004b8c:	d501      	bpl.n	8004b92 <_printf_float+0x152>
 8004b8e:	3301      	adds	r3, #1
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0a5      	beq.n	8004ae6 <_printf_float+0xa6>
 8004b9a:	232d      	movs	r3, #45	; 0x2d
 8004b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba0:	e7a1      	b.n	8004ae6 <_printf_float+0xa6>
 8004ba2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004ba6:	f000 8177 	beq.w	8004e98 <_printf_float+0x458>
 8004baa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004bae:	d1bb      	bne.n	8004b28 <_printf_float+0xe8>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	d1b9      	bne.n	8004b28 <_printf_float+0xe8>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e7b6      	b.n	8004b26 <_printf_float+0xe6>
 8004bb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004bbc:	d119      	bne.n	8004bf2 <_printf_float+0x1b2>
 8004bbe:	2900      	cmp	r1, #0
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	dd0c      	ble.n	8004bde <_printf_float+0x19e>
 8004bc4:	6121      	str	r1, [r4, #16]
 8004bc6:	b913      	cbnz	r3, 8004bce <_printf_float+0x18e>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	07d2      	lsls	r2, r2, #31
 8004bcc:	d502      	bpl.n	8004bd4 <_printf_float+0x194>
 8004bce:	3301      	adds	r3, #1
 8004bd0:	440b      	add	r3, r1
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	e7d9      	b.n	8004b92 <_printf_float+0x152>
 8004bde:	b913      	cbnz	r3, 8004be6 <_printf_float+0x1a6>
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	07d0      	lsls	r0, r2, #31
 8004be4:	d501      	bpl.n	8004bea <_printf_float+0x1aa>
 8004be6:	3302      	adds	r3, #2
 8004be8:	e7f3      	b.n	8004bd2 <_printf_float+0x192>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e7f1      	b.n	8004bd2 <_printf_float+0x192>
 8004bee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004bf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	db05      	blt.n	8004c06 <_printf_float+0x1c6>
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	07d1      	lsls	r1, r2, #31
 8004c00:	d5e8      	bpl.n	8004bd4 <_printf_float+0x194>
 8004c02:	3301      	adds	r3, #1
 8004c04:	e7e5      	b.n	8004bd2 <_printf_float+0x192>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bfd4      	ite	le
 8004c0a:	f1c3 0302 	rsble	r3, r3, #2
 8004c0e:	2301      	movgt	r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	e7de      	b.n	8004bd2 <_printf_float+0x192>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	055a      	lsls	r2, r3, #21
 8004c18:	d407      	bmi.n	8004c2a <_printf_float+0x1ea>
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b8      	blx	r7
 8004c24:	3001      	adds	r0, #1
 8004c26:	d12b      	bne.n	8004c80 <_printf_float+0x240>
 8004c28:	e767      	b.n	8004afa <_printf_float+0xba>
 8004c2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004c2e:	f240 80dc 	bls.w	8004dea <_printf_float+0x3aa>
 8004c32:	2200      	movs	r2, #0
 8004c34:	2300      	movs	r3, #0
 8004c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c3a:	f7fb ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d033      	beq.n	8004caa <_printf_float+0x26a>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4a41      	ldr	r2, [pc, #260]	; (8004d4c <_printf_float+0x30c>)
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f af54 	beq.w	8004afa <_printf_float+0xba>
 8004c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c56:	429a      	cmp	r2, r3
 8004c58:	db02      	blt.n	8004c60 <_printf_float+0x220>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	07d8      	lsls	r0, r3, #31
 8004c5e:	d50f      	bpl.n	8004c80 <_printf_float+0x240>
 8004c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af45 	beq.w	8004afa <_printf_float+0xba>
 8004c70:	f04f 0800 	mov.w	r8, #0
 8004c74:	f104 091a 	add.w	r9, r4, #26
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dc09      	bgt.n	8004c94 <_printf_float+0x254>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	f100 8103 	bmi.w	8004e8e <_printf_float+0x44e>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e734      	b.n	8004afe <_printf_float+0xbe>
 8004c94:	2301      	movs	r3, #1
 8004c96:	464a      	mov	r2, r9
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f af2b 	beq.w	8004afa <_printf_float+0xba>
 8004ca4:	f108 0801 	add.w	r8, r8, #1
 8004ca8:	e7e6      	b.n	8004c78 <_printf_float+0x238>
 8004caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dc2b      	bgt.n	8004d08 <_printf_float+0x2c8>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <_printf_float+0x30c>)
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af1d 	beq.w	8004afa <_printf_float+0xba>
 8004cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc2:	b923      	cbnz	r3, 8004cce <_printf_float+0x28e>
 8004cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc6:	b913      	cbnz	r3, 8004cce <_printf_float+0x28e>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d9      	lsls	r1, r3, #31
 8004ccc:	d5d8      	bpl.n	8004c80 <_printf_float+0x240>
 8004cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f af0e 	beq.w	8004afa <_printf_float+0xba>
 8004cde:	f04f 0900 	mov.w	r9, #0
 8004ce2:	f104 0a1a 	add.w	sl, r4, #26
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	425b      	negs	r3, r3
 8004cea:	454b      	cmp	r3, r9
 8004cec:	dc01      	bgt.n	8004cf2 <_printf_float+0x2b2>
 8004cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf0:	e794      	b.n	8004c1c <_printf_float+0x1dc>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	f43f aefc 	beq.w	8004afa <_printf_float+0xba>
 8004d02:	f109 0901 	add.w	r9, r9, #1
 8004d06:	e7ee      	b.n	8004ce6 <_printf_float+0x2a6>
 8004d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bfa8      	it	ge
 8004d10:	461a      	movge	r2, r3
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	4691      	mov	r9, r2
 8004d16:	dd07      	ble.n	8004d28 <_printf_float+0x2e8>
 8004d18:	4613      	mov	r3, r2
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f aee9 	beq.w	8004afa <_printf_float+0xba>
 8004d28:	f104 031a 	add.w	r3, r4, #26
 8004d2c:	f04f 0b00 	mov.w	fp, #0
 8004d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d34:	9306      	str	r3, [sp, #24]
 8004d36:	e015      	b.n	8004d64 <_printf_float+0x324>
 8004d38:	7fefffff 	.word	0x7fefffff
 8004d3c:	080069dc 	.word	0x080069dc
 8004d40:	080069d8 	.word	0x080069d8
 8004d44:	080069e4 	.word	0x080069e4
 8004d48:	080069e0 	.word	0x080069e0
 8004d4c:	080069e8 	.word	0x080069e8
 8004d50:	2301      	movs	r3, #1
 8004d52:	9a06      	ldr	r2, [sp, #24]
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f aecd 	beq.w	8004afa <_printf_float+0xba>
 8004d60:	f10b 0b01 	add.w	fp, fp, #1
 8004d64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d68:	ebaa 0309 	sub.w	r3, sl, r9
 8004d6c:	455b      	cmp	r3, fp
 8004d6e:	dcef      	bgt.n	8004d50 <_printf_float+0x310>
 8004d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	44d0      	add	r8, sl
 8004d78:	db15      	blt.n	8004da6 <_printf_float+0x366>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	07da      	lsls	r2, r3, #31
 8004d7e:	d412      	bmi.n	8004da6 <_printf_float+0x366>
 8004d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d84:	eba3 020a 	sub.w	r2, r3, sl
 8004d88:	eba3 0a01 	sub.w	sl, r3, r1
 8004d8c:	4592      	cmp	sl, r2
 8004d8e:	bfa8      	it	ge
 8004d90:	4692      	movge	sl, r2
 8004d92:	f1ba 0f00 	cmp.w	sl, #0
 8004d96:	dc0e      	bgt.n	8004db6 <_printf_float+0x376>
 8004d98:	f04f 0800 	mov.w	r8, #0
 8004d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004da0:	f104 091a 	add.w	r9, r4, #26
 8004da4:	e019      	b.n	8004dda <_printf_float+0x39a>
 8004da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	d1e5      	bne.n	8004d80 <_printf_float+0x340>
 8004db4:	e6a1      	b.n	8004afa <_printf_float+0xba>
 8004db6:	4653      	mov	r3, sl
 8004db8:	4642      	mov	r2, r8
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d1e9      	bne.n	8004d98 <_printf_float+0x358>
 8004dc4:	e699      	b.n	8004afa <_printf_float+0xba>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	464a      	mov	r2, r9
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae92 	beq.w	8004afa <_printf_float+0xba>
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	eba3 030a 	sub.w	r3, r3, sl
 8004de4:	4543      	cmp	r3, r8
 8004de6:	dcee      	bgt.n	8004dc6 <_printf_float+0x386>
 8004de8:	e74a      	b.n	8004c80 <_printf_float+0x240>
 8004dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dec:	2a01      	cmp	r2, #1
 8004dee:	dc01      	bgt.n	8004df4 <_printf_float+0x3b4>
 8004df0:	07db      	lsls	r3, r3, #31
 8004df2:	d53a      	bpl.n	8004e6a <_printf_float+0x42a>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4642      	mov	r2, r8
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f ae7b 	beq.w	8004afa <_printf_float+0xba>
 8004e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f108 0801 	add.w	r8, r8, #1
 8004e14:	f43f ae71 	beq.w	8004afa <_printf_float+0xba>
 8004e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e24:	2300      	movs	r3, #0
 8004e26:	f7fb fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e2a:	b9c8      	cbnz	r0, 8004e60 <_printf_float+0x420>
 8004e2c:	4653      	mov	r3, sl
 8004e2e:	4642      	mov	r2, r8
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	d10e      	bne.n	8004e58 <_printf_float+0x418>
 8004e3a:	e65e      	b.n	8004afa <_printf_float+0xba>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4652      	mov	r2, sl
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	f43f ae57 	beq.w	8004afa <_printf_float+0xba>
 8004e4c:	f108 0801 	add.w	r8, r8, #1
 8004e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	4543      	cmp	r3, r8
 8004e56:	dcf1      	bgt.n	8004e3c <_printf_float+0x3fc>
 8004e58:	464b      	mov	r3, r9
 8004e5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e5e:	e6de      	b.n	8004c1e <_printf_float+0x1de>
 8004e60:	f04f 0800 	mov.w	r8, #0
 8004e64:	f104 0a1a 	add.w	sl, r4, #26
 8004e68:	e7f2      	b.n	8004e50 <_printf_float+0x410>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e7df      	b.n	8004e2e <_printf_float+0x3ee>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	464a      	mov	r2, r9
 8004e72:	4631      	mov	r1, r6
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b8      	blx	r7
 8004e78:	3001      	adds	r0, #1
 8004e7a:	f43f ae3e 	beq.w	8004afa <_printf_float+0xba>
 8004e7e:	f108 0801 	add.w	r8, r8, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	4543      	cmp	r3, r8
 8004e8a:	dcf0      	bgt.n	8004e6e <_printf_float+0x42e>
 8004e8c:	e6fc      	b.n	8004c88 <_printf_float+0x248>
 8004e8e:	f04f 0800 	mov.w	r8, #0
 8004e92:	f104 0919 	add.w	r9, r4, #25
 8004e96:	e7f4      	b.n	8004e82 <_printf_float+0x442>
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	f43f ae8b 	beq.w	8004bb4 <_printf_float+0x174>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004ea4:	ab09      	add	r3, sp, #36	; 0x24
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	ec49 8b10 	vmov	d0, r8, r9
 8004eac:	6022      	str	r2, [r4, #0]
 8004eae:	f8cd a004 	str.w	sl, [sp, #4]
 8004eb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f7ff fd2e 	bl	8004918 <__cvt>
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	e648      	b.n	8004b52 <_printf_float+0x112>

08004ec0 <_printf_common>:
 8004ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	4691      	mov	r9, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	688a      	ldr	r2, [r1, #8]
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bfb8      	it	lt
 8004ed4:	4613      	movlt	r3, r2
 8004ed6:	f8c9 3000 	str.w	r3, [r9]
 8004eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	b112      	cbz	r2, 8004eea <_printf_common+0x2a>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	f8c9 3000 	str.w	r3, [r9]
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	0699      	lsls	r1, r3, #26
 8004eee:	bf42      	ittt	mi
 8004ef0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ef4:	3302      	addmi	r3, #2
 8004ef6:	f8c9 3000 	strmi.w	r3, [r9]
 8004efa:	6825      	ldr	r5, [r4, #0]
 8004efc:	f015 0506 	ands.w	r5, r5, #6
 8004f00:	d107      	bne.n	8004f12 <_printf_common+0x52>
 8004f02:	f104 0a19 	add.w	sl, r4, #25
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	f8d9 2000 	ldr.w	r2, [r9]
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	42ab      	cmp	r3, r5
 8004f10:	dc28      	bgt.n	8004f64 <_printf_common+0xa4>
 8004f12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	3300      	adds	r3, #0
 8004f1a:	bf18      	it	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	0692      	lsls	r2, r2, #26
 8004f20:	d42d      	bmi.n	8004f7e <_printf_common+0xbe>
 8004f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f26:	4639      	mov	r1, r7
 8004f28:	4630      	mov	r0, r6
 8004f2a:	47c0      	blx	r8
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d020      	beq.n	8004f72 <_printf_common+0xb2>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	68e5      	ldr	r5, [r4, #12]
 8004f34:	f8d9 2000 	ldr.w	r2, [r9]
 8004f38:	f003 0306 	and.w	r3, r3, #6
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	bf08      	it	eq
 8004f40:	1aad      	subeq	r5, r5, r2
 8004f42:	68a3      	ldr	r3, [r4, #8]
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	bf0c      	ite	eq
 8004f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f4c:	2500      	movne	r5, #0
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	bfc4      	itt	gt
 8004f52:	1a9b      	subgt	r3, r3, r2
 8004f54:	18ed      	addgt	r5, r5, r3
 8004f56:	f04f 0900 	mov.w	r9, #0
 8004f5a:	341a      	adds	r4, #26
 8004f5c:	454d      	cmp	r5, r9
 8004f5e:	d11a      	bne.n	8004f96 <_printf_common+0xd6>
 8004f60:	2000      	movs	r0, #0
 8004f62:	e008      	b.n	8004f76 <_printf_common+0xb6>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4652      	mov	r2, sl
 8004f68:	4639      	mov	r1, r7
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d103      	bne.n	8004f7a <_printf_common+0xba>
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7a:	3501      	adds	r5, #1
 8004f7c:	e7c3      	b.n	8004f06 <_printf_common+0x46>
 8004f7e:	18e1      	adds	r1, r4, r3
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	2030      	movs	r0, #48	; 0x30
 8004f84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f88:	4422      	add	r2, r4
 8004f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f92:	3302      	adds	r3, #2
 8004f94:	e7c5      	b.n	8004f22 <_printf_common+0x62>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	47c0      	blx	r8
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d0e6      	beq.n	8004f72 <_printf_common+0xb2>
 8004fa4:	f109 0901 	add.w	r9, r9, #1
 8004fa8:	e7d8      	b.n	8004f5c <_printf_common+0x9c>
	...

08004fac <_printf_i>:
 8004fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	7e09      	ldrb	r1, [r1, #24]
 8004fb8:	b085      	sub	sp, #20
 8004fba:	296e      	cmp	r1, #110	; 0x6e
 8004fbc:	4617      	mov	r7, r2
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	4698      	mov	r8, r3
 8004fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fc4:	f000 80b3 	beq.w	800512e <_printf_i+0x182>
 8004fc8:	d822      	bhi.n	8005010 <_printf_i+0x64>
 8004fca:	2963      	cmp	r1, #99	; 0x63
 8004fcc:	d036      	beq.n	800503c <_printf_i+0x90>
 8004fce:	d80a      	bhi.n	8004fe6 <_printf_i+0x3a>
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	f000 80b9 	beq.w	8005148 <_printf_i+0x19c>
 8004fd6:	2958      	cmp	r1, #88	; 0x58
 8004fd8:	f000 8083 	beq.w	80050e2 <_printf_i+0x136>
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fe4:	e032      	b.n	800504c <_printf_i+0xa0>
 8004fe6:	2964      	cmp	r1, #100	; 0x64
 8004fe8:	d001      	beq.n	8004fee <_printf_i+0x42>
 8004fea:	2969      	cmp	r1, #105	; 0x69
 8004fec:	d1f6      	bne.n	8004fdc <_printf_i+0x30>
 8004fee:	6820      	ldr	r0, [r4, #0]
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	0605      	lsls	r5, r0, #24
 8004ff4:	f103 0104 	add.w	r1, r3, #4
 8004ff8:	d52a      	bpl.n	8005050 <_printf_i+0xa4>
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	da03      	bge.n	800500a <_printf_i+0x5e>
 8005002:	222d      	movs	r2, #45	; 0x2d
 8005004:	425b      	negs	r3, r3
 8005006:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800500a:	486f      	ldr	r0, [pc, #444]	; (80051c8 <_printf_i+0x21c>)
 800500c:	220a      	movs	r2, #10
 800500e:	e039      	b.n	8005084 <_printf_i+0xd8>
 8005010:	2973      	cmp	r1, #115	; 0x73
 8005012:	f000 809d 	beq.w	8005150 <_printf_i+0x1a4>
 8005016:	d808      	bhi.n	800502a <_printf_i+0x7e>
 8005018:	296f      	cmp	r1, #111	; 0x6f
 800501a:	d020      	beq.n	800505e <_printf_i+0xb2>
 800501c:	2970      	cmp	r1, #112	; 0x70
 800501e:	d1dd      	bne.n	8004fdc <_printf_i+0x30>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	f043 0320 	orr.w	r3, r3, #32
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	e003      	b.n	8005032 <_printf_i+0x86>
 800502a:	2975      	cmp	r1, #117	; 0x75
 800502c:	d017      	beq.n	800505e <_printf_i+0xb2>
 800502e:	2978      	cmp	r1, #120	; 0x78
 8005030:	d1d4      	bne.n	8004fdc <_printf_i+0x30>
 8005032:	2378      	movs	r3, #120	; 0x78
 8005034:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005038:	4864      	ldr	r0, [pc, #400]	; (80051cc <_printf_i+0x220>)
 800503a:	e055      	b.n	80050e8 <_printf_i+0x13c>
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	1d19      	adds	r1, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6011      	str	r1, [r2, #0]
 8005044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800504c:	2301      	movs	r3, #1
 800504e:	e08c      	b.n	800516a <_printf_i+0x1be>
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6011      	str	r1, [r2, #0]
 8005054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005058:	bf18      	it	ne
 800505a:	b21b      	sxthne	r3, r3
 800505c:	e7cf      	b.n	8004ffe <_printf_i+0x52>
 800505e:	6813      	ldr	r3, [r2, #0]
 8005060:	6825      	ldr	r5, [r4, #0]
 8005062:	1d18      	adds	r0, r3, #4
 8005064:	6010      	str	r0, [r2, #0]
 8005066:	0628      	lsls	r0, r5, #24
 8005068:	d501      	bpl.n	800506e <_printf_i+0xc2>
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	e002      	b.n	8005074 <_printf_i+0xc8>
 800506e:	0668      	lsls	r0, r5, #25
 8005070:	d5fb      	bpl.n	800506a <_printf_i+0xbe>
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	4854      	ldr	r0, [pc, #336]	; (80051c8 <_printf_i+0x21c>)
 8005076:	296f      	cmp	r1, #111	; 0x6f
 8005078:	bf14      	ite	ne
 800507a:	220a      	movne	r2, #10
 800507c:	2208      	moveq	r2, #8
 800507e:	2100      	movs	r1, #0
 8005080:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005084:	6865      	ldr	r5, [r4, #4]
 8005086:	60a5      	str	r5, [r4, #8]
 8005088:	2d00      	cmp	r5, #0
 800508a:	f2c0 8095 	blt.w	80051b8 <_printf_i+0x20c>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	f021 0104 	bic.w	r1, r1, #4
 8005094:	6021      	str	r1, [r4, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d13d      	bne.n	8005116 <_printf_i+0x16a>
 800509a:	2d00      	cmp	r5, #0
 800509c:	f040 808e 	bne.w	80051bc <_printf_i+0x210>
 80050a0:	4665      	mov	r5, ip
 80050a2:	2a08      	cmp	r2, #8
 80050a4:	d10b      	bne.n	80050be <_printf_i+0x112>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	07db      	lsls	r3, r3, #31
 80050aa:	d508      	bpl.n	80050be <_printf_i+0x112>
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bfde      	ittt	le
 80050b4:	2330      	movle	r3, #48	; 0x30
 80050b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050be:	ebac 0305 	sub.w	r3, ip, r5
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	f8cd 8000 	str.w	r8, [sp]
 80050c8:	463b      	mov	r3, r7
 80050ca:	aa03      	add	r2, sp, #12
 80050cc:	4621      	mov	r1, r4
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff fef6 	bl	8004ec0 <_printf_common>
 80050d4:	3001      	adds	r0, #1
 80050d6:	d14d      	bne.n	8005174 <_printf_i+0x1c8>
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	b005      	add	sp, #20
 80050de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050e2:	4839      	ldr	r0, [pc, #228]	; (80051c8 <_printf_i+0x21c>)
 80050e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050e8:	6813      	ldr	r3, [r2, #0]
 80050ea:	6821      	ldr	r1, [r4, #0]
 80050ec:	1d1d      	adds	r5, r3, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6015      	str	r5, [r2, #0]
 80050f2:	060a      	lsls	r2, r1, #24
 80050f4:	d50b      	bpl.n	800510e <_printf_i+0x162>
 80050f6:	07ca      	lsls	r2, r1, #31
 80050f8:	bf44      	itt	mi
 80050fa:	f041 0120 	orrmi.w	r1, r1, #32
 80050fe:	6021      	strmi	r1, [r4, #0]
 8005100:	b91b      	cbnz	r3, 800510a <_printf_i+0x15e>
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	f022 0220 	bic.w	r2, r2, #32
 8005108:	6022      	str	r2, [r4, #0]
 800510a:	2210      	movs	r2, #16
 800510c:	e7b7      	b.n	800507e <_printf_i+0xd2>
 800510e:	064d      	lsls	r5, r1, #25
 8005110:	bf48      	it	mi
 8005112:	b29b      	uxthmi	r3, r3
 8005114:	e7ef      	b.n	80050f6 <_printf_i+0x14a>
 8005116:	4665      	mov	r5, ip
 8005118:	fbb3 f1f2 	udiv	r1, r3, r2
 800511c:	fb02 3311 	mls	r3, r2, r1, r3
 8005120:	5cc3      	ldrb	r3, [r0, r3]
 8005122:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005126:	460b      	mov	r3, r1
 8005128:	2900      	cmp	r1, #0
 800512a:	d1f5      	bne.n	8005118 <_printf_i+0x16c>
 800512c:	e7b9      	b.n	80050a2 <_printf_i+0xf6>
 800512e:	6813      	ldr	r3, [r2, #0]
 8005130:	6825      	ldr	r5, [r4, #0]
 8005132:	6961      	ldr	r1, [r4, #20]
 8005134:	1d18      	adds	r0, r3, #4
 8005136:	6010      	str	r0, [r2, #0]
 8005138:	0628      	lsls	r0, r5, #24
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	d501      	bpl.n	8005142 <_printf_i+0x196>
 800513e:	6019      	str	r1, [r3, #0]
 8005140:	e002      	b.n	8005148 <_printf_i+0x19c>
 8005142:	066a      	lsls	r2, r5, #25
 8005144:	d5fb      	bpl.n	800513e <_printf_i+0x192>
 8005146:	8019      	strh	r1, [r3, #0]
 8005148:	2300      	movs	r3, #0
 800514a:	6123      	str	r3, [r4, #16]
 800514c:	4665      	mov	r5, ip
 800514e:	e7b9      	b.n	80050c4 <_printf_i+0x118>
 8005150:	6813      	ldr	r3, [r2, #0]
 8005152:	1d19      	adds	r1, r3, #4
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	681d      	ldr	r5, [r3, #0]
 8005158:	6862      	ldr	r2, [r4, #4]
 800515a:	2100      	movs	r1, #0
 800515c:	4628      	mov	r0, r5
 800515e:	f7fb f847 	bl	80001f0 <memchr>
 8005162:	b108      	cbz	r0, 8005168 <_printf_i+0x1bc>
 8005164:	1b40      	subs	r0, r0, r5
 8005166:	6060      	str	r0, [r4, #4]
 8005168:	6863      	ldr	r3, [r4, #4]
 800516a:	6123      	str	r3, [r4, #16]
 800516c:	2300      	movs	r3, #0
 800516e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005172:	e7a7      	b.n	80050c4 <_printf_i+0x118>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	462a      	mov	r2, r5
 8005178:	4639      	mov	r1, r7
 800517a:	4630      	mov	r0, r6
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0aa      	beq.n	80050d8 <_printf_i+0x12c>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	079b      	lsls	r3, r3, #30
 8005186:	d413      	bmi.n	80051b0 <_printf_i+0x204>
 8005188:	68e0      	ldr	r0, [r4, #12]
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	4298      	cmp	r0, r3
 800518e:	bfb8      	it	lt
 8005190:	4618      	movlt	r0, r3
 8005192:	e7a3      	b.n	80050dc <_printf_i+0x130>
 8005194:	2301      	movs	r3, #1
 8005196:	464a      	mov	r2, r9
 8005198:	4639      	mov	r1, r7
 800519a:	4630      	mov	r0, r6
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d09a      	beq.n	80050d8 <_printf_i+0x12c>
 80051a2:	3501      	adds	r5, #1
 80051a4:	68e3      	ldr	r3, [r4, #12]
 80051a6:	9a03      	ldr	r2, [sp, #12]
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	42ab      	cmp	r3, r5
 80051ac:	dcf2      	bgt.n	8005194 <_printf_i+0x1e8>
 80051ae:	e7eb      	b.n	8005188 <_printf_i+0x1dc>
 80051b0:	2500      	movs	r5, #0
 80051b2:	f104 0919 	add.w	r9, r4, #25
 80051b6:	e7f5      	b.n	80051a4 <_printf_i+0x1f8>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ac      	bne.n	8005116 <_printf_i+0x16a>
 80051bc:	7803      	ldrb	r3, [r0, #0]
 80051be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c6:	e76c      	b.n	80050a2 <_printf_i+0xf6>
 80051c8:	080069ea 	.word	0x080069ea
 80051cc:	080069fb 	.word	0x080069fb

080051d0 <siprintf>:
 80051d0:	b40e      	push	{r1, r2, r3}
 80051d2:	b500      	push	{lr}
 80051d4:	b09c      	sub	sp, #112	; 0x70
 80051d6:	ab1d      	add	r3, sp, #116	; 0x74
 80051d8:	9002      	str	r0, [sp, #8]
 80051da:	9006      	str	r0, [sp, #24]
 80051dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <siprintf+0x38>)
 80051e2:	9107      	str	r1, [sp, #28]
 80051e4:	9104      	str	r1, [sp, #16]
 80051e6:	4909      	ldr	r1, [pc, #36]	; (800520c <siprintf+0x3c>)
 80051e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ec:	9105      	str	r1, [sp, #20]
 80051ee:	6800      	ldr	r0, [r0, #0]
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	a902      	add	r1, sp, #8
 80051f4:	f001 fa5c 	bl	80066b0 <_svfiprintf_r>
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	b01c      	add	sp, #112	; 0x70
 8005200:	f85d eb04 	ldr.w	lr, [sp], #4
 8005204:	b003      	add	sp, #12
 8005206:	4770      	bx	lr
 8005208:	20000024 	.word	0x20000024
 800520c:	ffff0208 	.word	0xffff0208

08005210 <quorem>:
 8005210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	6903      	ldr	r3, [r0, #16]
 8005216:	690c      	ldr	r4, [r1, #16]
 8005218:	42a3      	cmp	r3, r4
 800521a:	4680      	mov	r8, r0
 800521c:	f2c0 8082 	blt.w	8005324 <quorem+0x114>
 8005220:	3c01      	subs	r4, #1
 8005222:	f101 0714 	add.w	r7, r1, #20
 8005226:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800522a:	f100 0614 	add.w	r6, r0, #20
 800522e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005232:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005236:	eb06 030c 	add.w	r3, r6, ip
 800523a:	3501      	adds	r5, #1
 800523c:	eb07 090c 	add.w	r9, r7, ip
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	fbb0 f5f5 	udiv	r5, r0, r5
 8005246:	b395      	cbz	r5, 80052ae <quorem+0x9e>
 8005248:	f04f 0a00 	mov.w	sl, #0
 800524c:	4638      	mov	r0, r7
 800524e:	46b6      	mov	lr, r6
 8005250:	46d3      	mov	fp, sl
 8005252:	f850 2b04 	ldr.w	r2, [r0], #4
 8005256:	b293      	uxth	r3, r2
 8005258:	fb05 a303 	mla	r3, r5, r3, sl
 800525c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005260:	b29b      	uxth	r3, r3
 8005262:	ebab 0303 	sub.w	r3, fp, r3
 8005266:	0c12      	lsrs	r2, r2, #16
 8005268:	f8de b000 	ldr.w	fp, [lr]
 800526c:	fb05 a202 	mla	r2, r5, r2, sl
 8005270:	fa13 f38b 	uxtah	r3, r3, fp
 8005274:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005278:	fa1f fb82 	uxth.w	fp, r2
 800527c:	f8de 2000 	ldr.w	r2, [lr]
 8005280:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005288:	b29b      	uxth	r3, r3
 800528a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800528e:	4581      	cmp	r9, r0
 8005290:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005294:	f84e 3b04 	str.w	r3, [lr], #4
 8005298:	d2db      	bcs.n	8005252 <quorem+0x42>
 800529a:	f856 300c 	ldr.w	r3, [r6, ip]
 800529e:	b933      	cbnz	r3, 80052ae <quorem+0x9e>
 80052a0:	9b01      	ldr	r3, [sp, #4]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	429e      	cmp	r6, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	d330      	bcc.n	800530c <quorem+0xfc>
 80052aa:	f8c8 4010 	str.w	r4, [r8, #16]
 80052ae:	4640      	mov	r0, r8
 80052b0:	f001 f828 	bl	8006304 <__mcmp>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	db25      	blt.n	8005304 <quorem+0xf4>
 80052b8:	3501      	adds	r5, #1
 80052ba:	4630      	mov	r0, r6
 80052bc:	f04f 0c00 	mov.w	ip, #0
 80052c0:	f857 2b04 	ldr.w	r2, [r7], #4
 80052c4:	f8d0 e000 	ldr.w	lr, [r0]
 80052c8:	b293      	uxth	r3, r2
 80052ca:	ebac 0303 	sub.w	r3, ip, r3
 80052ce:	0c12      	lsrs	r2, r2, #16
 80052d0:	fa13 f38e 	uxtah	r3, r3, lr
 80052d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052dc:	b29b      	uxth	r3, r3
 80052de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052e2:	45b9      	cmp	r9, r7
 80052e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052e8:	f840 3b04 	str.w	r3, [r0], #4
 80052ec:	d2e8      	bcs.n	80052c0 <quorem+0xb0>
 80052ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80052f2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80052f6:	b92a      	cbnz	r2, 8005304 <quorem+0xf4>
 80052f8:	3b04      	subs	r3, #4
 80052fa:	429e      	cmp	r6, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	d30b      	bcc.n	8005318 <quorem+0x108>
 8005300:	f8c8 4010 	str.w	r4, [r8, #16]
 8005304:	4628      	mov	r0, r5
 8005306:	b003      	add	sp, #12
 8005308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	3b04      	subs	r3, #4
 8005310:	2a00      	cmp	r2, #0
 8005312:	d1ca      	bne.n	80052aa <quorem+0x9a>
 8005314:	3c01      	subs	r4, #1
 8005316:	e7c5      	b.n	80052a4 <quorem+0x94>
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	3b04      	subs	r3, #4
 800531c:	2a00      	cmp	r2, #0
 800531e:	d1ef      	bne.n	8005300 <quorem+0xf0>
 8005320:	3c01      	subs	r4, #1
 8005322:	e7ea      	b.n	80052fa <quorem+0xea>
 8005324:	2000      	movs	r0, #0
 8005326:	e7ee      	b.n	8005306 <quorem+0xf6>

08005328 <_dtoa_r>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	ec57 6b10 	vmov	r6, r7, d0
 8005330:	b097      	sub	sp, #92	; 0x5c
 8005332:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005334:	9106      	str	r1, [sp, #24]
 8005336:	4604      	mov	r4, r0
 8005338:	920b      	str	r2, [sp, #44]	; 0x2c
 800533a:	9312      	str	r3, [sp, #72]	; 0x48
 800533c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005340:	e9cd 6700 	strd	r6, r7, [sp]
 8005344:	b93d      	cbnz	r5, 8005356 <_dtoa_r+0x2e>
 8005346:	2010      	movs	r0, #16
 8005348:	f000 fdb4 	bl	8005eb4 <malloc>
 800534c:	6260      	str	r0, [r4, #36]	; 0x24
 800534e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005352:	6005      	str	r5, [r0, #0]
 8005354:	60c5      	str	r5, [r0, #12]
 8005356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005358:	6819      	ldr	r1, [r3, #0]
 800535a:	b151      	cbz	r1, 8005372 <_dtoa_r+0x4a>
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	604a      	str	r2, [r1, #4]
 8005360:	2301      	movs	r3, #1
 8005362:	4093      	lsls	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
 8005366:	4620      	mov	r0, r4
 8005368:	f000 fdeb 	bl	8005f42 <_Bfree>
 800536c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	1e3b      	subs	r3, r7, #0
 8005374:	bfbb      	ittet	lt
 8005376:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800537a:	9301      	strlt	r3, [sp, #4]
 800537c:	2300      	movge	r3, #0
 800537e:	2201      	movlt	r2, #1
 8005380:	bfac      	ite	ge
 8005382:	f8c8 3000 	strge.w	r3, [r8]
 8005386:	f8c8 2000 	strlt.w	r2, [r8]
 800538a:	4baf      	ldr	r3, [pc, #700]	; (8005648 <_dtoa_r+0x320>)
 800538c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005390:	ea33 0308 	bics.w	r3, r3, r8
 8005394:	d114      	bne.n	80053c0 <_dtoa_r+0x98>
 8005396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005398:	f242 730f 	movw	r3, #9999	; 0x270f
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	b923      	cbnz	r3, 80053ac <_dtoa_r+0x84>
 80053a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f000 8542 	beq.w	8005e30 <_dtoa_r+0xb08>
 80053ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800565c <_dtoa_r+0x334>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8544 	beq.w	8005e40 <_dtoa_r+0xb18>
 80053b8:	f10b 0303 	add.w	r3, fp, #3
 80053bc:	f000 bd3e 	b.w	8005e3c <_dtoa_r+0xb14>
 80053c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2300      	movs	r3, #0
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fb fb84 	bl	8000ad8 <__aeabi_dcmpeq>
 80053d0:	4681      	mov	r9, r0
 80053d2:	b168      	cbz	r0, 80053f0 <_dtoa_r+0xc8>
 80053d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053d6:	2301      	movs	r3, #1
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8524 	beq.w	8005e2a <_dtoa_r+0xb02>
 80053e2:	4b9a      	ldr	r3, [pc, #616]	; (800564c <_dtoa_r+0x324>)
 80053e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	f000 bd28 	b.w	8005e40 <_dtoa_r+0xb18>
 80053f0:	aa14      	add	r2, sp, #80	; 0x50
 80053f2:	a915      	add	r1, sp, #84	; 0x54
 80053f4:	ec47 6b10 	vmov	d0, r6, r7
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fffa 	bl	80063f2 <__d2b>
 80053fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005402:	9004      	str	r0, [sp, #16]
 8005404:	2d00      	cmp	r5, #0
 8005406:	d07c      	beq.n	8005502 <_dtoa_r+0x1da>
 8005408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800540c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005410:	46b2      	mov	sl, r6
 8005412:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800541a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800541e:	2200      	movs	r2, #0
 8005420:	4b8b      	ldr	r3, [pc, #556]	; (8005650 <_dtoa_r+0x328>)
 8005422:	4650      	mov	r0, sl
 8005424:	4659      	mov	r1, fp
 8005426:	f7fa ff37 	bl	8000298 <__aeabi_dsub>
 800542a:	a381      	add	r3, pc, #516	; (adr r3, 8005630 <_dtoa_r+0x308>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fb f8ea 	bl	8000608 <__aeabi_dmul>
 8005434:	a380      	add	r3, pc, #512	; (adr r3, 8005638 <_dtoa_r+0x310>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fa ff2f 	bl	800029c <__adddf3>
 800543e:	4606      	mov	r6, r0
 8005440:	4628      	mov	r0, r5
 8005442:	460f      	mov	r7, r1
 8005444:	f7fb f876 	bl	8000534 <__aeabi_i2d>
 8005448:	a37d      	add	r3, pc, #500	; (adr r3, 8005640 <_dtoa_r+0x318>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fb f8db 	bl	8000608 <__aeabi_dmul>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4630      	mov	r0, r6
 8005458:	4639      	mov	r1, r7
 800545a:	f7fa ff1f 	bl	800029c <__adddf3>
 800545e:	4606      	mov	r6, r0
 8005460:	460f      	mov	r7, r1
 8005462:	f7fb fb81 	bl	8000b68 <__aeabi_d2iz>
 8005466:	2200      	movs	r2, #0
 8005468:	4682      	mov	sl, r0
 800546a:	2300      	movs	r3, #0
 800546c:	4630      	mov	r0, r6
 800546e:	4639      	mov	r1, r7
 8005470:	f7fb fb3c 	bl	8000aec <__aeabi_dcmplt>
 8005474:	b148      	cbz	r0, 800548a <_dtoa_r+0x162>
 8005476:	4650      	mov	r0, sl
 8005478:	f7fb f85c 	bl	8000534 <__aeabi_i2d>
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	f7fb fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005484:	b908      	cbnz	r0, 800548a <_dtoa_r+0x162>
 8005486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800548a:	f1ba 0f16 	cmp.w	sl, #22
 800548e:	d859      	bhi.n	8005544 <_dtoa_r+0x21c>
 8005490:	4970      	ldr	r1, [pc, #448]	; (8005654 <_dtoa_r+0x32c>)
 8005492:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800549a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800549e:	f7fb fb43 	bl	8000b28 <__aeabi_dcmpgt>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d050      	beq.n	8005548 <_dtoa_r+0x220>
 80054a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054aa:	2300      	movs	r3, #0
 80054ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80054ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054b0:	1b5d      	subs	r5, r3, r5
 80054b2:	f1b5 0801 	subs.w	r8, r5, #1
 80054b6:	bf49      	itett	mi
 80054b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80054bc:	2300      	movpl	r3, #0
 80054be:	9305      	strmi	r3, [sp, #20]
 80054c0:	f04f 0800 	movmi.w	r8, #0
 80054c4:	bf58      	it	pl
 80054c6:	9305      	strpl	r3, [sp, #20]
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	db3e      	blt.n	800554c <_dtoa_r+0x224>
 80054ce:	2300      	movs	r3, #0
 80054d0:	44d0      	add	r8, sl
 80054d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80054d6:	9307      	str	r3, [sp, #28]
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	2b09      	cmp	r3, #9
 80054dc:	f200 8090 	bhi.w	8005600 <_dtoa_r+0x2d8>
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	bfc4      	itt	gt
 80054e4:	3b04      	subgt	r3, #4
 80054e6:	9306      	strgt	r3, [sp, #24]
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	f1a3 0302 	sub.w	r3, r3, #2
 80054ee:	bfcc      	ite	gt
 80054f0:	2500      	movgt	r5, #0
 80054f2:	2501      	movle	r5, #1
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	f200 808f 	bhi.w	8005618 <_dtoa_r+0x2f0>
 80054fa:	e8df f003 	tbb	[pc, r3]
 80054fe:	7f7d      	.short	0x7f7d
 8005500:	7131      	.short	0x7131
 8005502:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005506:	441d      	add	r5, r3
 8005508:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800550c:	2820      	cmp	r0, #32
 800550e:	dd13      	ble.n	8005538 <_dtoa_r+0x210>
 8005510:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005514:	9b00      	ldr	r3, [sp, #0]
 8005516:	fa08 f800 	lsl.w	r8, r8, r0
 800551a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800551e:	fa23 f000 	lsr.w	r0, r3, r0
 8005522:	ea48 0000 	orr.w	r0, r8, r0
 8005526:	f7fa fff5 	bl	8000514 <__aeabi_ui2d>
 800552a:	2301      	movs	r3, #1
 800552c:	4682      	mov	sl, r0
 800552e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005532:	3d01      	subs	r5, #1
 8005534:	9313      	str	r3, [sp, #76]	; 0x4c
 8005536:	e772      	b.n	800541e <_dtoa_r+0xf6>
 8005538:	9b00      	ldr	r3, [sp, #0]
 800553a:	f1c0 0020 	rsb	r0, r0, #32
 800553e:	fa03 f000 	lsl.w	r0, r3, r0
 8005542:	e7f0      	b.n	8005526 <_dtoa_r+0x1fe>
 8005544:	2301      	movs	r3, #1
 8005546:	e7b1      	b.n	80054ac <_dtoa_r+0x184>
 8005548:	900f      	str	r0, [sp, #60]	; 0x3c
 800554a:	e7b0      	b.n	80054ae <_dtoa_r+0x186>
 800554c:	9b05      	ldr	r3, [sp, #20]
 800554e:	eba3 030a 	sub.w	r3, r3, sl
 8005552:	9305      	str	r3, [sp, #20]
 8005554:	f1ca 0300 	rsb	r3, sl, #0
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	2300      	movs	r3, #0
 800555c:	930e      	str	r3, [sp, #56]	; 0x38
 800555e:	e7bb      	b.n	80054d8 <_dtoa_r+0x1b0>
 8005560:	2301      	movs	r3, #1
 8005562:	930a      	str	r3, [sp, #40]	; 0x28
 8005564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	dd59      	ble.n	800561e <_dtoa_r+0x2f6>
 800556a:	9302      	str	r3, [sp, #8]
 800556c:	4699      	mov	r9, r3
 800556e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005570:	2200      	movs	r2, #0
 8005572:	6072      	str	r2, [r6, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	f102 0014 	add.w	r0, r2, #20
 800557a:	4298      	cmp	r0, r3
 800557c:	6871      	ldr	r1, [r6, #4]
 800557e:	d953      	bls.n	8005628 <_dtoa_r+0x300>
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fcaa 	bl	8005eda <_Balloc>
 8005586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005588:	6030      	str	r0, [r6, #0]
 800558a:	f1b9 0f0e 	cmp.w	r9, #14
 800558e:	f8d3 b000 	ldr.w	fp, [r3]
 8005592:	f200 80e6 	bhi.w	8005762 <_dtoa_r+0x43a>
 8005596:	2d00      	cmp	r5, #0
 8005598:	f000 80e3 	beq.w	8005762 <_dtoa_r+0x43a>
 800559c:	ed9d 7b00 	vldr	d7, [sp]
 80055a0:	f1ba 0f00 	cmp.w	sl, #0
 80055a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80055a8:	dd74      	ble.n	8005694 <_dtoa_r+0x36c>
 80055aa:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <_dtoa_r+0x32c>)
 80055ac:	f00a 030f 	and.w	r3, sl, #15
 80055b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055b4:	ed93 7b00 	vldr	d7, [r3]
 80055b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80055bc:	06f0      	lsls	r0, r6, #27
 80055be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80055c2:	d565      	bpl.n	8005690 <_dtoa_r+0x368>
 80055c4:	4b24      	ldr	r3, [pc, #144]	; (8005658 <_dtoa_r+0x330>)
 80055c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055ce:	f7fb f945 	bl	800085c <__aeabi_ddiv>
 80055d2:	e9cd 0100 	strd	r0, r1, [sp]
 80055d6:	f006 060f 	and.w	r6, r6, #15
 80055da:	2503      	movs	r5, #3
 80055dc:	4f1e      	ldr	r7, [pc, #120]	; (8005658 <_dtoa_r+0x330>)
 80055de:	e04c      	b.n	800567a <_dtoa_r+0x352>
 80055e0:	2301      	movs	r3, #1
 80055e2:	930a      	str	r3, [sp, #40]	; 0x28
 80055e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e6:	4453      	add	r3, sl
 80055e8:	f103 0901 	add.w	r9, r3, #1
 80055ec:	9302      	str	r3, [sp, #8]
 80055ee:	464b      	mov	r3, r9
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bfb8      	it	lt
 80055f4:	2301      	movlt	r3, #1
 80055f6:	e7ba      	b.n	800556e <_dtoa_r+0x246>
 80055f8:	2300      	movs	r3, #0
 80055fa:	e7b2      	b.n	8005562 <_dtoa_r+0x23a>
 80055fc:	2300      	movs	r3, #0
 80055fe:	e7f0      	b.n	80055e2 <_dtoa_r+0x2ba>
 8005600:	2501      	movs	r5, #1
 8005602:	2300      	movs	r3, #0
 8005604:	9306      	str	r3, [sp, #24]
 8005606:	950a      	str	r5, [sp, #40]	; 0x28
 8005608:	f04f 33ff 	mov.w	r3, #4294967295
 800560c:	9302      	str	r3, [sp, #8]
 800560e:	4699      	mov	r9, r3
 8005610:	2200      	movs	r2, #0
 8005612:	2312      	movs	r3, #18
 8005614:	920b      	str	r2, [sp, #44]	; 0x2c
 8005616:	e7aa      	b.n	800556e <_dtoa_r+0x246>
 8005618:	2301      	movs	r3, #1
 800561a:	930a      	str	r3, [sp, #40]	; 0x28
 800561c:	e7f4      	b.n	8005608 <_dtoa_r+0x2e0>
 800561e:	2301      	movs	r3, #1
 8005620:	9302      	str	r3, [sp, #8]
 8005622:	4699      	mov	r9, r3
 8005624:	461a      	mov	r2, r3
 8005626:	e7f5      	b.n	8005614 <_dtoa_r+0x2ec>
 8005628:	3101      	adds	r1, #1
 800562a:	6071      	str	r1, [r6, #4]
 800562c:	0052      	lsls	r2, r2, #1
 800562e:	e7a2      	b.n	8005576 <_dtoa_r+0x24e>
 8005630:	636f4361 	.word	0x636f4361
 8005634:	3fd287a7 	.word	0x3fd287a7
 8005638:	8b60c8b3 	.word	0x8b60c8b3
 800563c:	3fc68a28 	.word	0x3fc68a28
 8005640:	509f79fb 	.word	0x509f79fb
 8005644:	3fd34413 	.word	0x3fd34413
 8005648:	7ff00000 	.word	0x7ff00000
 800564c:	080069e9 	.word	0x080069e9
 8005650:	3ff80000 	.word	0x3ff80000
 8005654:	08006a48 	.word	0x08006a48
 8005658:	08006a20 	.word	0x08006a20
 800565c:	08006a15 	.word	0x08006a15
 8005660:	07f1      	lsls	r1, r6, #31
 8005662:	d508      	bpl.n	8005676 <_dtoa_r+0x34e>
 8005664:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800566c:	f7fa ffcc 	bl	8000608 <__aeabi_dmul>
 8005670:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005674:	3501      	adds	r5, #1
 8005676:	1076      	asrs	r6, r6, #1
 8005678:	3708      	adds	r7, #8
 800567a:	2e00      	cmp	r6, #0
 800567c:	d1f0      	bne.n	8005660 <_dtoa_r+0x338>
 800567e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005686:	f7fb f8e9 	bl	800085c <__aeabi_ddiv>
 800568a:	e9cd 0100 	strd	r0, r1, [sp]
 800568e:	e01a      	b.n	80056c6 <_dtoa_r+0x39e>
 8005690:	2502      	movs	r5, #2
 8005692:	e7a3      	b.n	80055dc <_dtoa_r+0x2b4>
 8005694:	f000 80a0 	beq.w	80057d8 <_dtoa_r+0x4b0>
 8005698:	f1ca 0600 	rsb	r6, sl, #0
 800569c:	4b9f      	ldr	r3, [pc, #636]	; (800591c <_dtoa_r+0x5f4>)
 800569e:	4fa0      	ldr	r7, [pc, #640]	; (8005920 <_dtoa_r+0x5f8>)
 80056a0:	f006 020f 	and.w	r2, r6, #15
 80056a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056b0:	f7fa ffaa 	bl	8000608 <__aeabi_dmul>
 80056b4:	e9cd 0100 	strd	r0, r1, [sp]
 80056b8:	1136      	asrs	r6, r6, #4
 80056ba:	2300      	movs	r3, #0
 80056bc:	2502      	movs	r5, #2
 80056be:	2e00      	cmp	r6, #0
 80056c0:	d17f      	bne.n	80057c2 <_dtoa_r+0x49a>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e1      	bne.n	800568a <_dtoa_r+0x362>
 80056c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8087 	beq.w	80057dc <_dtoa_r+0x4b4>
 80056ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056d2:	2200      	movs	r2, #0
 80056d4:	4b93      	ldr	r3, [pc, #588]	; (8005924 <_dtoa_r+0x5fc>)
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	f7fb fa07 	bl	8000aec <__aeabi_dcmplt>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d07c      	beq.n	80057dc <_dtoa_r+0x4b4>
 80056e2:	f1b9 0f00 	cmp.w	r9, #0
 80056e6:	d079      	beq.n	80057dc <_dtoa_r+0x4b4>
 80056e8:	9b02      	ldr	r3, [sp, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	dd35      	ble.n	800575a <_dtoa_r+0x432>
 80056ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056f2:	9308      	str	r3, [sp, #32]
 80056f4:	4639      	mov	r1, r7
 80056f6:	2200      	movs	r2, #0
 80056f8:	4b8b      	ldr	r3, [pc, #556]	; (8005928 <_dtoa_r+0x600>)
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fa ff84 	bl	8000608 <__aeabi_dmul>
 8005700:	e9cd 0100 	strd	r0, r1, [sp]
 8005704:	9f02      	ldr	r7, [sp, #8]
 8005706:	3501      	adds	r5, #1
 8005708:	4628      	mov	r0, r5
 800570a:	f7fa ff13 	bl	8000534 <__aeabi_i2d>
 800570e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005712:	f7fa ff79 	bl	8000608 <__aeabi_dmul>
 8005716:	2200      	movs	r2, #0
 8005718:	4b84      	ldr	r3, [pc, #528]	; (800592c <_dtoa_r+0x604>)
 800571a:	f7fa fdbf 	bl	800029c <__adddf3>
 800571e:	4605      	mov	r5, r0
 8005720:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005724:	2f00      	cmp	r7, #0
 8005726:	d15d      	bne.n	80057e4 <_dtoa_r+0x4bc>
 8005728:	2200      	movs	r2, #0
 800572a:	4b81      	ldr	r3, [pc, #516]	; (8005930 <_dtoa_r+0x608>)
 800572c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005730:	f7fa fdb2 	bl	8000298 <__aeabi_dsub>
 8005734:	462a      	mov	r2, r5
 8005736:	4633      	mov	r3, r6
 8005738:	e9cd 0100 	strd	r0, r1, [sp]
 800573c:	f7fb f9f4 	bl	8000b28 <__aeabi_dcmpgt>
 8005740:	2800      	cmp	r0, #0
 8005742:	f040 8288 	bne.w	8005c56 <_dtoa_r+0x92e>
 8005746:	462a      	mov	r2, r5
 8005748:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800574c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005750:	f7fb f9cc 	bl	8000aec <__aeabi_dcmplt>
 8005754:	2800      	cmp	r0, #0
 8005756:	f040 827c 	bne.w	8005c52 <_dtoa_r+0x92a>
 800575a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800575e:	e9cd 2300 	strd	r2, r3, [sp]
 8005762:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	f2c0 8150 	blt.w	8005a0a <_dtoa_r+0x6e2>
 800576a:	f1ba 0f0e 	cmp.w	sl, #14
 800576e:	f300 814c 	bgt.w	8005a0a <_dtoa_r+0x6e2>
 8005772:	4b6a      	ldr	r3, [pc, #424]	; (800591c <_dtoa_r+0x5f4>)
 8005774:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005778:	ed93 7b00 	vldr	d7, [r3]
 800577c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005784:	f280 80d8 	bge.w	8005938 <_dtoa_r+0x610>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	f300 80d4 	bgt.w	8005938 <_dtoa_r+0x610>
 8005790:	f040 825e 	bne.w	8005c50 <_dtoa_r+0x928>
 8005794:	2200      	movs	r2, #0
 8005796:	4b66      	ldr	r3, [pc, #408]	; (8005930 <_dtoa_r+0x608>)
 8005798:	ec51 0b17 	vmov	r0, r1, d7
 800579c:	f7fa ff34 	bl	8000608 <__aeabi_dmul>
 80057a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057a4:	f7fb f9b6 	bl	8000b14 <__aeabi_dcmpge>
 80057a8:	464f      	mov	r7, r9
 80057aa:	464e      	mov	r6, r9
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f040 8234 	bne.w	8005c1a <_dtoa_r+0x8f2>
 80057b2:	2331      	movs	r3, #49	; 0x31
 80057b4:	f10b 0501 	add.w	r5, fp, #1
 80057b8:	f88b 3000 	strb.w	r3, [fp]
 80057bc:	f10a 0a01 	add.w	sl, sl, #1
 80057c0:	e22f      	b.n	8005c22 <_dtoa_r+0x8fa>
 80057c2:	07f2      	lsls	r2, r6, #31
 80057c4:	d505      	bpl.n	80057d2 <_dtoa_r+0x4aa>
 80057c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ca:	f7fa ff1d 	bl	8000608 <__aeabi_dmul>
 80057ce:	3501      	adds	r5, #1
 80057d0:	2301      	movs	r3, #1
 80057d2:	1076      	asrs	r6, r6, #1
 80057d4:	3708      	adds	r7, #8
 80057d6:	e772      	b.n	80056be <_dtoa_r+0x396>
 80057d8:	2502      	movs	r5, #2
 80057da:	e774      	b.n	80056c6 <_dtoa_r+0x39e>
 80057dc:	f8cd a020 	str.w	sl, [sp, #32]
 80057e0:	464f      	mov	r7, r9
 80057e2:	e791      	b.n	8005708 <_dtoa_r+0x3e0>
 80057e4:	4b4d      	ldr	r3, [pc, #308]	; (800591c <_dtoa_r+0x5f4>)
 80057e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d047      	beq.n	8005884 <_dtoa_r+0x55c>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	2000      	movs	r0, #0
 80057fa:	494e      	ldr	r1, [pc, #312]	; (8005934 <_dtoa_r+0x60c>)
 80057fc:	f7fb f82e 	bl	800085c <__aeabi_ddiv>
 8005800:	462a      	mov	r2, r5
 8005802:	4633      	mov	r3, r6
 8005804:	f7fa fd48 	bl	8000298 <__aeabi_dsub>
 8005808:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800580c:	465d      	mov	r5, fp
 800580e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005812:	f7fb f9a9 	bl	8000b68 <__aeabi_d2iz>
 8005816:	4606      	mov	r6, r0
 8005818:	f7fa fe8c 	bl	8000534 <__aeabi_i2d>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005824:	f7fa fd38 	bl	8000298 <__aeabi_dsub>
 8005828:	3630      	adds	r6, #48	; 0x30
 800582a:	f805 6b01 	strb.w	r6, [r5], #1
 800582e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005832:	e9cd 0100 	strd	r0, r1, [sp]
 8005836:	f7fb f959 	bl	8000aec <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	d163      	bne.n	8005906 <_dtoa_r+0x5de>
 800583e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005842:	2000      	movs	r0, #0
 8005844:	4937      	ldr	r1, [pc, #220]	; (8005924 <_dtoa_r+0x5fc>)
 8005846:	f7fa fd27 	bl	8000298 <__aeabi_dsub>
 800584a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800584e:	f7fb f94d 	bl	8000aec <__aeabi_dcmplt>
 8005852:	2800      	cmp	r0, #0
 8005854:	f040 80b7 	bne.w	80059c6 <_dtoa_r+0x69e>
 8005858:	eba5 030b 	sub.w	r3, r5, fp
 800585c:	429f      	cmp	r7, r3
 800585e:	f77f af7c 	ble.w	800575a <_dtoa_r+0x432>
 8005862:	2200      	movs	r2, #0
 8005864:	4b30      	ldr	r3, [pc, #192]	; (8005928 <_dtoa_r+0x600>)
 8005866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800586a:	f7fa fecd 	bl	8000608 <__aeabi_dmul>
 800586e:	2200      	movs	r2, #0
 8005870:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005874:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <_dtoa_r+0x600>)
 8005876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800587a:	f7fa fec5 	bl	8000608 <__aeabi_dmul>
 800587e:	e9cd 0100 	strd	r0, r1, [sp]
 8005882:	e7c4      	b.n	800580e <_dtoa_r+0x4e6>
 8005884:	462a      	mov	r2, r5
 8005886:	4633      	mov	r3, r6
 8005888:	f7fa febe 	bl	8000608 <__aeabi_dmul>
 800588c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005890:	eb0b 0507 	add.w	r5, fp, r7
 8005894:	465e      	mov	r6, fp
 8005896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800589a:	f7fb f965 	bl	8000b68 <__aeabi_d2iz>
 800589e:	4607      	mov	r7, r0
 80058a0:	f7fa fe48 	bl	8000534 <__aeabi_i2d>
 80058a4:	3730      	adds	r7, #48	; 0x30
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ae:	f7fa fcf3 	bl	8000298 <__aeabi_dsub>
 80058b2:	f806 7b01 	strb.w	r7, [r6], #1
 80058b6:	42ae      	cmp	r6, r5
 80058b8:	e9cd 0100 	strd	r0, r1, [sp]
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	d126      	bne.n	8005910 <_dtoa_r+0x5e8>
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <_dtoa_r+0x60c>)
 80058c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058c8:	f7fa fce8 	bl	800029c <__adddf3>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058d4:	f7fb f928 	bl	8000b28 <__aeabi_dcmpgt>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d174      	bne.n	80059c6 <_dtoa_r+0x69e>
 80058dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058e0:	2000      	movs	r0, #0
 80058e2:	4914      	ldr	r1, [pc, #80]	; (8005934 <_dtoa_r+0x60c>)
 80058e4:	f7fa fcd8 	bl	8000298 <__aeabi_dsub>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f0:	f7fb f8fc 	bl	8000aec <__aeabi_dcmplt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	f43f af30 	beq.w	800575a <_dtoa_r+0x432>
 80058fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058fe:	2b30      	cmp	r3, #48	; 0x30
 8005900:	f105 32ff 	add.w	r2, r5, #4294967295
 8005904:	d002      	beq.n	800590c <_dtoa_r+0x5e4>
 8005906:	f8dd a020 	ldr.w	sl, [sp, #32]
 800590a:	e04a      	b.n	80059a2 <_dtoa_r+0x67a>
 800590c:	4615      	mov	r5, r2
 800590e:	e7f4      	b.n	80058fa <_dtoa_r+0x5d2>
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <_dtoa_r+0x600>)
 8005912:	f7fa fe79 	bl	8000608 <__aeabi_dmul>
 8005916:	e9cd 0100 	strd	r0, r1, [sp]
 800591a:	e7bc      	b.n	8005896 <_dtoa_r+0x56e>
 800591c:	08006a48 	.word	0x08006a48
 8005920:	08006a20 	.word	0x08006a20
 8005924:	3ff00000 	.word	0x3ff00000
 8005928:	40240000 	.word	0x40240000
 800592c:	401c0000 	.word	0x401c0000
 8005930:	40140000 	.word	0x40140000
 8005934:	3fe00000 	.word	0x3fe00000
 8005938:	e9dd 6700 	ldrd	r6, r7, [sp]
 800593c:	465d      	mov	r5, fp
 800593e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005942:	4630      	mov	r0, r6
 8005944:	4639      	mov	r1, r7
 8005946:	f7fa ff89 	bl	800085c <__aeabi_ddiv>
 800594a:	f7fb f90d 	bl	8000b68 <__aeabi_d2iz>
 800594e:	4680      	mov	r8, r0
 8005950:	f7fa fdf0 	bl	8000534 <__aeabi_i2d>
 8005954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005958:	f7fa fe56 	bl	8000608 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005968:	f7fa fc96 	bl	8000298 <__aeabi_dsub>
 800596c:	f805 6b01 	strb.w	r6, [r5], #1
 8005970:	eba5 060b 	sub.w	r6, r5, fp
 8005974:	45b1      	cmp	r9, r6
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	d139      	bne.n	80059f0 <_dtoa_r+0x6c8>
 800597c:	f7fa fc8e 	bl	800029c <__adddf3>
 8005980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005984:	4606      	mov	r6, r0
 8005986:	460f      	mov	r7, r1
 8005988:	f7fb f8ce 	bl	8000b28 <__aeabi_dcmpgt>
 800598c:	b9c8      	cbnz	r0, 80059c2 <_dtoa_r+0x69a>
 800598e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005992:	4630      	mov	r0, r6
 8005994:	4639      	mov	r1, r7
 8005996:	f7fb f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800599a:	b110      	cbz	r0, 80059a2 <_dtoa_r+0x67a>
 800599c:	f018 0f01 	tst.w	r8, #1
 80059a0:	d10f      	bne.n	80059c2 <_dtoa_r+0x69a>
 80059a2:	9904      	ldr	r1, [sp, #16]
 80059a4:	4620      	mov	r0, r4
 80059a6:	f000 facc 	bl	8005f42 <_Bfree>
 80059aa:	2300      	movs	r3, #0
 80059ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059ae:	702b      	strb	r3, [r5, #0]
 80059b0:	f10a 0301 	add.w	r3, sl, #1
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8241 	beq.w	8005e40 <_dtoa_r+0xb18>
 80059be:	601d      	str	r5, [r3, #0]
 80059c0:	e23e      	b.n	8005e40 <_dtoa_r+0xb18>
 80059c2:	f8cd a020 	str.w	sl, [sp, #32]
 80059c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059ca:	2a39      	cmp	r2, #57	; 0x39
 80059cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80059d0:	d108      	bne.n	80059e4 <_dtoa_r+0x6bc>
 80059d2:	459b      	cmp	fp, r3
 80059d4:	d10a      	bne.n	80059ec <_dtoa_r+0x6c4>
 80059d6:	9b08      	ldr	r3, [sp, #32]
 80059d8:	3301      	adds	r3, #1
 80059da:	9308      	str	r3, [sp, #32]
 80059dc:	2330      	movs	r3, #48	; 0x30
 80059de:	f88b 3000 	strb.w	r3, [fp]
 80059e2:	465b      	mov	r3, fp
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	3201      	adds	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e78c      	b.n	8005906 <_dtoa_r+0x5de>
 80059ec:	461d      	mov	r5, r3
 80059ee:	e7ea      	b.n	80059c6 <_dtoa_r+0x69e>
 80059f0:	2200      	movs	r2, #0
 80059f2:	4b9b      	ldr	r3, [pc, #620]	; (8005c60 <_dtoa_r+0x938>)
 80059f4:	f7fa fe08 	bl	8000608 <__aeabi_dmul>
 80059f8:	2200      	movs	r2, #0
 80059fa:	2300      	movs	r3, #0
 80059fc:	4606      	mov	r6, r0
 80059fe:	460f      	mov	r7, r1
 8005a00:	f7fb f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d09a      	beq.n	800593e <_dtoa_r+0x616>
 8005a08:	e7cb      	b.n	80059a2 <_dtoa_r+0x67a>
 8005a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	f000 808b 	beq.w	8005b28 <_dtoa_r+0x800>
 8005a12:	9a06      	ldr	r2, [sp, #24]
 8005a14:	2a01      	cmp	r2, #1
 8005a16:	dc6e      	bgt.n	8005af6 <_dtoa_r+0x7ce>
 8005a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	d067      	beq.n	8005aee <_dtoa_r+0x7c6>
 8005a1e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a22:	9f07      	ldr	r7, [sp, #28]
 8005a24:	9d05      	ldr	r5, [sp, #20]
 8005a26:	9a05      	ldr	r2, [sp, #20]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	441a      	add	r2, r3
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	9205      	str	r2, [sp, #20]
 8005a30:	4498      	add	r8, r3
 8005a32:	f000 fb26 	bl	8006082 <__i2b>
 8005a36:	4606      	mov	r6, r0
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	dd0c      	ble.n	8005a56 <_dtoa_r+0x72e>
 8005a3c:	f1b8 0f00 	cmp.w	r8, #0
 8005a40:	dd09      	ble.n	8005a56 <_dtoa_r+0x72e>
 8005a42:	4545      	cmp	r5, r8
 8005a44:	9a05      	ldr	r2, [sp, #20]
 8005a46:	462b      	mov	r3, r5
 8005a48:	bfa8      	it	ge
 8005a4a:	4643      	movge	r3, r8
 8005a4c:	1ad2      	subs	r2, r2, r3
 8005a4e:	9205      	str	r2, [sp, #20]
 8005a50:	1aed      	subs	r5, r5, r3
 8005a52:	eba8 0803 	sub.w	r8, r8, r3
 8005a56:	9b07      	ldr	r3, [sp, #28]
 8005a58:	b1eb      	cbz	r3, 8005a96 <_dtoa_r+0x76e>
 8005a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d067      	beq.n	8005b30 <_dtoa_r+0x808>
 8005a60:	b18f      	cbz	r7, 8005a86 <_dtoa_r+0x75e>
 8005a62:	4631      	mov	r1, r6
 8005a64:	463a      	mov	r2, r7
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fbaa 	bl	80061c0 <__pow5mult>
 8005a6c:	9a04      	ldr	r2, [sp, #16]
 8005a6e:	4601      	mov	r1, r0
 8005a70:	4606      	mov	r6, r0
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fb0e 	bl	8006094 <__multiply>
 8005a78:	9904      	ldr	r1, [sp, #16]
 8005a7a:	9008      	str	r0, [sp, #32]
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fa60 	bl	8005f42 <_Bfree>
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	9b07      	ldr	r3, [sp, #28]
 8005a88:	1bda      	subs	r2, r3, r7
 8005a8a:	d004      	beq.n	8005a96 <_dtoa_r+0x76e>
 8005a8c:	9904      	ldr	r1, [sp, #16]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fb96 	bl	80061c0 <__pow5mult>
 8005a94:	9004      	str	r0, [sp, #16]
 8005a96:	2101      	movs	r1, #1
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 faf2 	bl	8006082 <__i2b>
 8005a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 81d0 	beq.w	8005e48 <_dtoa_r+0xb20>
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fb87 	bl	80061c0 <__pow5mult>
 8005ab2:	9b06      	ldr	r3, [sp, #24]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	4607      	mov	r7, r0
 8005ab8:	dc40      	bgt.n	8005b3c <_dtoa_r+0x814>
 8005aba:	9b00      	ldr	r3, [sp, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d139      	bne.n	8005b34 <_dtoa_r+0x80c>
 8005ac0:	9b01      	ldr	r3, [sp, #4]
 8005ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d136      	bne.n	8005b38 <_dtoa_r+0x810>
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	0d1b      	lsrs	r3, r3, #20
 8005ad2:	051b      	lsls	r3, r3, #20
 8005ad4:	b12b      	cbz	r3, 8005ae2 <_dtoa_r+0x7ba>
 8005ad6:	9b05      	ldr	r3, [sp, #20]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	9305      	str	r3, [sp, #20]
 8005adc:	f108 0801 	add.w	r8, r8, #1
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d12a      	bne.n	8005b40 <_dtoa_r+0x818>
 8005aea:	2001      	movs	r0, #1
 8005aec:	e030      	b.n	8005b50 <_dtoa_r+0x828>
 8005aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005af0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005af4:	e795      	b.n	8005a22 <_dtoa_r+0x6fa>
 8005af6:	9b07      	ldr	r3, [sp, #28]
 8005af8:	f109 37ff 	add.w	r7, r9, #4294967295
 8005afc:	42bb      	cmp	r3, r7
 8005afe:	bfbf      	itttt	lt
 8005b00:	9b07      	ldrlt	r3, [sp, #28]
 8005b02:	9707      	strlt	r7, [sp, #28]
 8005b04:	1afa      	sublt	r2, r7, r3
 8005b06:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b08:	bfbb      	ittet	lt
 8005b0a:	189b      	addlt	r3, r3, r2
 8005b0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b0e:	1bdf      	subge	r7, r3, r7
 8005b10:	2700      	movlt	r7, #0
 8005b12:	f1b9 0f00 	cmp.w	r9, #0
 8005b16:	bfb5      	itete	lt
 8005b18:	9b05      	ldrlt	r3, [sp, #20]
 8005b1a:	9d05      	ldrge	r5, [sp, #20]
 8005b1c:	eba3 0509 	sublt.w	r5, r3, r9
 8005b20:	464b      	movge	r3, r9
 8005b22:	bfb8      	it	lt
 8005b24:	2300      	movlt	r3, #0
 8005b26:	e77e      	b.n	8005a26 <_dtoa_r+0x6fe>
 8005b28:	9f07      	ldr	r7, [sp, #28]
 8005b2a:	9d05      	ldr	r5, [sp, #20]
 8005b2c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b2e:	e783      	b.n	8005a38 <_dtoa_r+0x710>
 8005b30:	9a07      	ldr	r2, [sp, #28]
 8005b32:	e7ab      	b.n	8005a8c <_dtoa_r+0x764>
 8005b34:	2300      	movs	r3, #0
 8005b36:	e7d4      	b.n	8005ae2 <_dtoa_r+0x7ba>
 8005b38:	9b00      	ldr	r3, [sp, #0]
 8005b3a:	e7d2      	b.n	8005ae2 <_dtoa_r+0x7ba>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005b46:	6918      	ldr	r0, [r3, #16]
 8005b48:	f000 fa4d 	bl	8005fe6 <__hi0bits>
 8005b4c:	f1c0 0020 	rsb	r0, r0, #32
 8005b50:	4440      	add	r0, r8
 8005b52:	f010 001f 	ands.w	r0, r0, #31
 8005b56:	d047      	beq.n	8005be8 <_dtoa_r+0x8c0>
 8005b58:	f1c0 0320 	rsb	r3, r0, #32
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	dd3b      	ble.n	8005bd8 <_dtoa_r+0x8b0>
 8005b60:	9b05      	ldr	r3, [sp, #20]
 8005b62:	f1c0 001c 	rsb	r0, r0, #28
 8005b66:	4403      	add	r3, r0
 8005b68:	9305      	str	r3, [sp, #20]
 8005b6a:	4405      	add	r5, r0
 8005b6c:	4480      	add	r8, r0
 8005b6e:	9b05      	ldr	r3, [sp, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	dd05      	ble.n	8005b80 <_dtoa_r+0x858>
 8005b74:	461a      	mov	r2, r3
 8005b76:	9904      	ldr	r1, [sp, #16]
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fb6f 	bl	800625c <__lshift>
 8005b7e:	9004      	str	r0, [sp, #16]
 8005b80:	f1b8 0f00 	cmp.w	r8, #0
 8005b84:	dd05      	ble.n	8005b92 <_dtoa_r+0x86a>
 8005b86:	4639      	mov	r1, r7
 8005b88:	4642      	mov	r2, r8
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 fb66 	bl	800625c <__lshift>
 8005b90:	4607      	mov	r7, r0
 8005b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b94:	b353      	cbz	r3, 8005bec <_dtoa_r+0x8c4>
 8005b96:	4639      	mov	r1, r7
 8005b98:	9804      	ldr	r0, [sp, #16]
 8005b9a:	f000 fbb3 	bl	8006304 <__mcmp>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	da24      	bge.n	8005bec <_dtoa_r+0x8c4>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	220a      	movs	r2, #10
 8005ba6:	9904      	ldr	r1, [sp, #16]
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 f9e1 	bl	8005f70 <__multadd>
 8005bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb0:	9004      	str	r0, [sp, #16]
 8005bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 814d 	beq.w	8005e56 <_dtoa_r+0xb2e>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 f9d4 	bl	8005f70 <__multadd>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	4606      	mov	r6, r0
 8005bce:	dc4f      	bgt.n	8005c70 <_dtoa_r+0x948>
 8005bd0:	9b06      	ldr	r3, [sp, #24]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	dd4c      	ble.n	8005c70 <_dtoa_r+0x948>
 8005bd6:	e011      	b.n	8005bfc <_dtoa_r+0x8d4>
 8005bd8:	d0c9      	beq.n	8005b6e <_dtoa_r+0x846>
 8005bda:	9a05      	ldr	r2, [sp, #20]
 8005bdc:	331c      	adds	r3, #28
 8005bde:	441a      	add	r2, r3
 8005be0:	9205      	str	r2, [sp, #20]
 8005be2:	441d      	add	r5, r3
 8005be4:	4498      	add	r8, r3
 8005be6:	e7c2      	b.n	8005b6e <_dtoa_r+0x846>
 8005be8:	4603      	mov	r3, r0
 8005bea:	e7f6      	b.n	8005bda <_dtoa_r+0x8b2>
 8005bec:	f1b9 0f00 	cmp.w	r9, #0
 8005bf0:	dc38      	bgt.n	8005c64 <_dtoa_r+0x93c>
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	dd35      	ble.n	8005c64 <_dtoa_r+0x93c>
 8005bf8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	b963      	cbnz	r3, 8005c1a <_dtoa_r+0x8f2>
 8005c00:	4639      	mov	r1, r7
 8005c02:	2205      	movs	r2, #5
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 f9b3 	bl	8005f70 <__multadd>
 8005c0a:	4601      	mov	r1, r0
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	9804      	ldr	r0, [sp, #16]
 8005c10:	f000 fb78 	bl	8006304 <__mcmp>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	f73f adcc 	bgt.w	80057b2 <_dtoa_r+0x48a>
 8005c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c1c:	465d      	mov	r5, fp
 8005c1e:	ea6f 0a03 	mvn.w	sl, r3
 8005c22:	f04f 0900 	mov.w	r9, #0
 8005c26:	4639      	mov	r1, r7
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f98a 	bl	8005f42 <_Bfree>
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	f43f aeb7 	beq.w	80059a2 <_dtoa_r+0x67a>
 8005c34:	f1b9 0f00 	cmp.w	r9, #0
 8005c38:	d005      	beq.n	8005c46 <_dtoa_r+0x91e>
 8005c3a:	45b1      	cmp	r9, r6
 8005c3c:	d003      	beq.n	8005c46 <_dtoa_r+0x91e>
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f97e 	bl	8005f42 <_Bfree>
 8005c46:	4631      	mov	r1, r6
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 f97a 	bl	8005f42 <_Bfree>
 8005c4e:	e6a8      	b.n	80059a2 <_dtoa_r+0x67a>
 8005c50:	2700      	movs	r7, #0
 8005c52:	463e      	mov	r6, r7
 8005c54:	e7e1      	b.n	8005c1a <_dtoa_r+0x8f2>
 8005c56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c5a:	463e      	mov	r6, r7
 8005c5c:	e5a9      	b.n	80057b2 <_dtoa_r+0x48a>
 8005c5e:	bf00      	nop
 8005c60:	40240000 	.word	0x40240000
 8005c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c66:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80fa 	beq.w	8005e64 <_dtoa_r+0xb3c>
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	dd05      	ble.n	8005c80 <_dtoa_r+0x958>
 8005c74:	4631      	mov	r1, r6
 8005c76:	462a      	mov	r2, r5
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 faef 	bl	800625c <__lshift>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	9b07      	ldr	r3, [sp, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d04c      	beq.n	8005d20 <_dtoa_r+0x9f8>
 8005c86:	6871      	ldr	r1, [r6, #4]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f926 	bl	8005eda <_Balloc>
 8005c8e:	6932      	ldr	r2, [r6, #16]
 8005c90:	3202      	adds	r2, #2
 8005c92:	4605      	mov	r5, r0
 8005c94:	0092      	lsls	r2, r2, #2
 8005c96:	f106 010c 	add.w	r1, r6, #12
 8005c9a:	300c      	adds	r0, #12
 8005c9c:	f000 f912 	bl	8005ec4 <memcpy>
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 fad9 	bl	800625c <__lshift>
 8005caa:	9b00      	ldr	r3, [sp, #0]
 8005cac:	f8cd b014 	str.w	fp, [sp, #20]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	46b1      	mov	r9, r6
 8005cb6:	9307      	str	r3, [sp, #28]
 8005cb8:	4606      	mov	r6, r0
 8005cba:	4639      	mov	r1, r7
 8005cbc:	9804      	ldr	r0, [sp, #16]
 8005cbe:	f7ff faa7 	bl	8005210 <quorem>
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cca:	9804      	ldr	r0, [sp, #16]
 8005ccc:	f000 fb1a 	bl	8006304 <__mcmp>
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	9000      	str	r0, [sp, #0]
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 fb2e 	bl	8006338 <__mdiff>
 8005cdc:	68c3      	ldr	r3, [r0, #12]
 8005cde:	4602      	mov	r2, r0
 8005ce0:	bb03      	cbnz	r3, 8005d24 <_dtoa_r+0x9fc>
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	9008      	str	r0, [sp, #32]
 8005ce6:	9804      	ldr	r0, [sp, #16]
 8005ce8:	f000 fb0c 	bl	8006304 <__mcmp>
 8005cec:	9a08      	ldr	r2, [sp, #32]
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	9308      	str	r3, [sp, #32]
 8005cf6:	f000 f924 	bl	8005f42 <_Bfree>
 8005cfa:	9b08      	ldr	r3, [sp, #32]
 8005cfc:	b9a3      	cbnz	r3, 8005d28 <_dtoa_r+0xa00>
 8005cfe:	9a06      	ldr	r2, [sp, #24]
 8005d00:	b992      	cbnz	r2, 8005d28 <_dtoa_r+0xa00>
 8005d02:	9a07      	ldr	r2, [sp, #28]
 8005d04:	b982      	cbnz	r2, 8005d28 <_dtoa_r+0xa00>
 8005d06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d0a:	d029      	beq.n	8005d60 <_dtoa_r+0xa38>
 8005d0c:	9b00      	ldr	r3, [sp, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dd01      	ble.n	8005d16 <_dtoa_r+0x9ee>
 8005d12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d16:	9b05      	ldr	r3, [sp, #20]
 8005d18:	1c5d      	adds	r5, r3, #1
 8005d1a:	f883 8000 	strb.w	r8, [r3]
 8005d1e:	e782      	b.n	8005c26 <_dtoa_r+0x8fe>
 8005d20:	4630      	mov	r0, r6
 8005d22:	e7c2      	b.n	8005caa <_dtoa_r+0x982>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e7e3      	b.n	8005cf0 <_dtoa_r+0x9c8>
 8005d28:	9a00      	ldr	r2, [sp, #0]
 8005d2a:	2a00      	cmp	r2, #0
 8005d2c:	db04      	blt.n	8005d38 <_dtoa_r+0xa10>
 8005d2e:	d125      	bne.n	8005d7c <_dtoa_r+0xa54>
 8005d30:	9a06      	ldr	r2, [sp, #24]
 8005d32:	bb1a      	cbnz	r2, 8005d7c <_dtoa_r+0xa54>
 8005d34:	9a07      	ldr	r2, [sp, #28]
 8005d36:	bb0a      	cbnz	r2, 8005d7c <_dtoa_r+0xa54>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	ddec      	ble.n	8005d16 <_dtoa_r+0x9ee>
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	9904      	ldr	r1, [sp, #16]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fa8b 	bl	800625c <__lshift>
 8005d46:	4639      	mov	r1, r7
 8005d48:	9004      	str	r0, [sp, #16]
 8005d4a:	f000 fadb 	bl	8006304 <__mcmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	dc03      	bgt.n	8005d5a <_dtoa_r+0xa32>
 8005d52:	d1e0      	bne.n	8005d16 <_dtoa_r+0x9ee>
 8005d54:	f018 0f01 	tst.w	r8, #1
 8005d58:	d0dd      	beq.n	8005d16 <_dtoa_r+0x9ee>
 8005d5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d5e:	d1d8      	bne.n	8005d12 <_dtoa_r+0x9ea>
 8005d60:	9b05      	ldr	r3, [sp, #20]
 8005d62:	9a05      	ldr	r2, [sp, #20]
 8005d64:	1c5d      	adds	r5, r3, #1
 8005d66:	2339      	movs	r3, #57	; 0x39
 8005d68:	7013      	strb	r3, [r2, #0]
 8005d6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d6e:	2b39      	cmp	r3, #57	; 0x39
 8005d70:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d74:	d04f      	beq.n	8005e16 <_dtoa_r+0xaee>
 8005d76:	3301      	adds	r3, #1
 8005d78:	7013      	strb	r3, [r2, #0]
 8005d7a:	e754      	b.n	8005c26 <_dtoa_r+0x8fe>
 8005d7c:	9a05      	ldr	r2, [sp, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f102 0501 	add.w	r5, r2, #1
 8005d84:	dd06      	ble.n	8005d94 <_dtoa_r+0xa6c>
 8005d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d8a:	d0e9      	beq.n	8005d60 <_dtoa_r+0xa38>
 8005d8c:	f108 0801 	add.w	r8, r8, #1
 8005d90:	9b05      	ldr	r3, [sp, #20]
 8005d92:	e7c2      	b.n	8005d1a <_dtoa_r+0x9f2>
 8005d94:	9a02      	ldr	r2, [sp, #8]
 8005d96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005d9a:	eba5 030b 	sub.w	r3, r5, fp
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d021      	beq.n	8005de6 <_dtoa_r+0xabe>
 8005da2:	2300      	movs	r3, #0
 8005da4:	220a      	movs	r2, #10
 8005da6:	9904      	ldr	r1, [sp, #16]
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 f8e1 	bl	8005f70 <__multadd>
 8005dae:	45b1      	cmp	r9, r6
 8005db0:	9004      	str	r0, [sp, #16]
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	f04f 020a 	mov.w	r2, #10
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	d105      	bne.n	8005dcc <_dtoa_r+0xaa4>
 8005dc0:	f000 f8d6 	bl	8005f70 <__multadd>
 8005dc4:	4681      	mov	r9, r0
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	9505      	str	r5, [sp, #20]
 8005dca:	e776      	b.n	8005cba <_dtoa_r+0x992>
 8005dcc:	f000 f8d0 	bl	8005f70 <__multadd>
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4681      	mov	r9, r0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	220a      	movs	r2, #10
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 f8c9 	bl	8005f70 <__multadd>
 8005dde:	4606      	mov	r6, r0
 8005de0:	e7f2      	b.n	8005dc8 <_dtoa_r+0xaa0>
 8005de2:	f04f 0900 	mov.w	r9, #0
 8005de6:	2201      	movs	r2, #1
 8005de8:	9904      	ldr	r1, [sp, #16]
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 fa36 	bl	800625c <__lshift>
 8005df0:	4639      	mov	r1, r7
 8005df2:	9004      	str	r0, [sp, #16]
 8005df4:	f000 fa86 	bl	8006304 <__mcmp>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	dcb6      	bgt.n	8005d6a <_dtoa_r+0xa42>
 8005dfc:	d102      	bne.n	8005e04 <_dtoa_r+0xadc>
 8005dfe:	f018 0f01 	tst.w	r8, #1
 8005e02:	d1b2      	bne.n	8005d6a <_dtoa_r+0xa42>
 8005e04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e0e:	f47f af0a 	bne.w	8005c26 <_dtoa_r+0x8fe>
 8005e12:	4615      	mov	r5, r2
 8005e14:	e7f6      	b.n	8005e04 <_dtoa_r+0xadc>
 8005e16:	4593      	cmp	fp, r2
 8005e18:	d105      	bne.n	8005e26 <_dtoa_r+0xafe>
 8005e1a:	2331      	movs	r3, #49	; 0x31
 8005e1c:	f10a 0a01 	add.w	sl, sl, #1
 8005e20:	f88b 3000 	strb.w	r3, [fp]
 8005e24:	e6ff      	b.n	8005c26 <_dtoa_r+0x8fe>
 8005e26:	4615      	mov	r5, r2
 8005e28:	e79f      	b.n	8005d6a <_dtoa_r+0xa42>
 8005e2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005e90 <_dtoa_r+0xb68>
 8005e2e:	e007      	b.n	8005e40 <_dtoa_r+0xb18>
 8005e30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005e94 <_dtoa_r+0xb6c>
 8005e36:	b11b      	cbz	r3, 8005e40 <_dtoa_r+0xb18>
 8005e38:	f10b 0308 	add.w	r3, fp, #8
 8005e3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	4658      	mov	r0, fp
 8005e42:	b017      	add	sp, #92	; 0x5c
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	9b06      	ldr	r3, [sp, #24]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	f77f ae35 	ble.w	8005aba <_dtoa_r+0x792>
 8005e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e52:	9307      	str	r3, [sp, #28]
 8005e54:	e649      	b.n	8005aea <_dtoa_r+0x7c2>
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dc03      	bgt.n	8005e64 <_dtoa_r+0xb3c>
 8005e5c:	9b06      	ldr	r3, [sp, #24]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	f73f aecc 	bgt.w	8005bfc <_dtoa_r+0x8d4>
 8005e64:	465d      	mov	r5, fp
 8005e66:	4639      	mov	r1, r7
 8005e68:	9804      	ldr	r0, [sp, #16]
 8005e6a:	f7ff f9d1 	bl	8005210 <quorem>
 8005e6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e72:	f805 8b01 	strb.w	r8, [r5], #1
 8005e76:	9a02      	ldr	r2, [sp, #8]
 8005e78:	eba5 030b 	sub.w	r3, r5, fp
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	ddb0      	ble.n	8005de2 <_dtoa_r+0xaba>
 8005e80:	2300      	movs	r3, #0
 8005e82:	220a      	movs	r2, #10
 8005e84:	9904      	ldr	r1, [sp, #16]
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 f872 	bl	8005f70 <__multadd>
 8005e8c:	9004      	str	r0, [sp, #16]
 8005e8e:	e7ea      	b.n	8005e66 <_dtoa_r+0xb3e>
 8005e90:	080069e8 	.word	0x080069e8
 8005e94:	08006a0c 	.word	0x08006a0c

08005e98 <_localeconv_r>:
 8005e98:	4b04      	ldr	r3, [pc, #16]	; (8005eac <_localeconv_r+0x14>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a18      	ldr	r0, [r3, #32]
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <_localeconv_r+0x18>)
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	bf08      	it	eq
 8005ea4:	4618      	moveq	r0, r3
 8005ea6:	30f0      	adds	r0, #240	; 0xf0
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000024 	.word	0x20000024
 8005eb0:	20000088 	.word	0x20000088

08005eb4 <malloc>:
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <malloc+0xc>)
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f000 bb45 	b.w	8006548 <_malloc_r>
 8005ebe:	bf00      	nop
 8005ec0:	20000024 	.word	0x20000024

08005ec4 <memcpy>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	1e43      	subs	r3, r0, #1
 8005ec8:	440a      	add	r2, r1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	d100      	bne.n	8005ed0 <memcpy+0xc>
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed8:	e7f7      	b.n	8005eca <memcpy+0x6>

08005eda <_Balloc>:
 8005eda:	b570      	push	{r4, r5, r6, lr}
 8005edc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460e      	mov	r6, r1
 8005ee2:	b93d      	cbnz	r5, 8005ef4 <_Balloc+0x1a>
 8005ee4:	2010      	movs	r0, #16
 8005ee6:	f7ff ffe5 	bl	8005eb4 <malloc>
 8005eea:	6260      	str	r0, [r4, #36]	; 0x24
 8005eec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ef0:	6005      	str	r5, [r0, #0]
 8005ef2:	60c5      	str	r5, [r0, #12]
 8005ef4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ef6:	68eb      	ldr	r3, [r5, #12]
 8005ef8:	b183      	cbz	r3, 8005f1c <_Balloc+0x42>
 8005efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f02:	b9b8      	cbnz	r0, 8005f34 <_Balloc+0x5a>
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f506 	lsl.w	r5, r1, r6
 8005f0a:	1d6a      	adds	r2, r5, #5
 8005f0c:	0092      	lsls	r2, r2, #2
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 fabe 	bl	8006490 <_calloc_r>
 8005f14:	b160      	cbz	r0, 8005f30 <_Balloc+0x56>
 8005f16:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f1a:	e00e      	b.n	8005f3a <_Balloc+0x60>
 8005f1c:	2221      	movs	r2, #33	; 0x21
 8005f1e:	2104      	movs	r1, #4
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fab5 	bl	8006490 <_calloc_r>
 8005f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f28:	60e8      	str	r0, [r5, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e4      	bne.n	8005efa <_Balloc+0x20>
 8005f30:	2000      	movs	r0, #0
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	6802      	ldr	r2, [r0, #0]
 8005f36:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f40:	e7f7      	b.n	8005f32 <_Balloc+0x58>

08005f42 <_Bfree>:
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f46:	4606      	mov	r6, r0
 8005f48:	460d      	mov	r5, r1
 8005f4a:	b93c      	cbnz	r4, 8005f5c <_Bfree+0x1a>
 8005f4c:	2010      	movs	r0, #16
 8005f4e:	f7ff ffb1 	bl	8005eb4 <malloc>
 8005f52:	6270      	str	r0, [r6, #36]	; 0x24
 8005f54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f58:	6004      	str	r4, [r0, #0]
 8005f5a:	60c4      	str	r4, [r0, #12]
 8005f5c:	b13d      	cbz	r5, 8005f6e <_Bfree+0x2c>
 8005f5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f60:	686a      	ldr	r2, [r5, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f68:	6029      	str	r1, [r5, #0]
 8005f6a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}

08005f70 <__multadd>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	690d      	ldr	r5, [r1, #16]
 8005f76:	461f      	mov	r7, r3
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	f101 0c14 	add.w	ip, r1, #20
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8dc 0000 	ldr.w	r0, [ip]
 8005f86:	b281      	uxth	r1, r0
 8005f88:	fb02 7101 	mla	r1, r2, r1, r7
 8005f8c:	0c0f      	lsrs	r7, r1, #16
 8005f8e:	0c00      	lsrs	r0, r0, #16
 8005f90:	fb02 7000 	mla	r0, r2, r0, r7
 8005f94:	b289      	uxth	r1, r1
 8005f96:	3301      	adds	r3, #1
 8005f98:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f9c:	429d      	cmp	r5, r3
 8005f9e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fa6:	dcec      	bgt.n	8005f82 <__multadd+0x12>
 8005fa8:	b1d7      	cbz	r7, 8005fe0 <__multadd+0x70>
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	42ab      	cmp	r3, r5
 8005fae:	dc12      	bgt.n	8005fd6 <__multadd+0x66>
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	3101      	adds	r1, #1
 8005fb6:	f7ff ff90 	bl	8005eda <_Balloc>
 8005fba:	6922      	ldr	r2, [r4, #16]
 8005fbc:	3202      	adds	r2, #2
 8005fbe:	f104 010c 	add.w	r1, r4, #12
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	0092      	lsls	r2, r2, #2
 8005fc6:	300c      	adds	r0, #12
 8005fc8:	f7ff ff7c 	bl	8005ec4 <memcpy>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff ffb7 	bl	8005f42 <_Bfree>
 8005fd4:	4644      	mov	r4, r8
 8005fd6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fda:	3501      	adds	r5, #1
 8005fdc:	615f      	str	r7, [r3, #20]
 8005fde:	6125      	str	r5, [r4, #16]
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fe6 <__hi0bits>:
 8005fe6:	0c02      	lsrs	r2, r0, #16
 8005fe8:	0412      	lsls	r2, r2, #16
 8005fea:	4603      	mov	r3, r0
 8005fec:	b9b2      	cbnz	r2, 800601c <__hi0bits+0x36>
 8005fee:	0403      	lsls	r3, r0, #16
 8005ff0:	2010      	movs	r0, #16
 8005ff2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ff6:	bf04      	itt	eq
 8005ff8:	021b      	lsleq	r3, r3, #8
 8005ffa:	3008      	addeq	r0, #8
 8005ffc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006000:	bf04      	itt	eq
 8006002:	011b      	lsleq	r3, r3, #4
 8006004:	3004      	addeq	r0, #4
 8006006:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800600a:	bf04      	itt	eq
 800600c:	009b      	lsleq	r3, r3, #2
 800600e:	3002      	addeq	r0, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	db06      	blt.n	8006022 <__hi0bits+0x3c>
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	d503      	bpl.n	8006020 <__hi0bits+0x3a>
 8006018:	3001      	adds	r0, #1
 800601a:	4770      	bx	lr
 800601c:	2000      	movs	r0, #0
 800601e:	e7e8      	b.n	8005ff2 <__hi0bits+0xc>
 8006020:	2020      	movs	r0, #32
 8006022:	4770      	bx	lr

08006024 <__lo0bits>:
 8006024:	6803      	ldr	r3, [r0, #0]
 8006026:	f013 0207 	ands.w	r2, r3, #7
 800602a:	4601      	mov	r1, r0
 800602c:	d00b      	beq.n	8006046 <__lo0bits+0x22>
 800602e:	07da      	lsls	r2, r3, #31
 8006030:	d423      	bmi.n	800607a <__lo0bits+0x56>
 8006032:	0798      	lsls	r0, r3, #30
 8006034:	bf49      	itett	mi
 8006036:	085b      	lsrmi	r3, r3, #1
 8006038:	089b      	lsrpl	r3, r3, #2
 800603a:	2001      	movmi	r0, #1
 800603c:	600b      	strmi	r3, [r1, #0]
 800603e:	bf5c      	itt	pl
 8006040:	600b      	strpl	r3, [r1, #0]
 8006042:	2002      	movpl	r0, #2
 8006044:	4770      	bx	lr
 8006046:	b298      	uxth	r0, r3
 8006048:	b9a8      	cbnz	r0, 8006076 <__lo0bits+0x52>
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	2010      	movs	r0, #16
 800604e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006052:	bf04      	itt	eq
 8006054:	0a1b      	lsreq	r3, r3, #8
 8006056:	3008      	addeq	r0, #8
 8006058:	071a      	lsls	r2, r3, #28
 800605a:	bf04      	itt	eq
 800605c:	091b      	lsreq	r3, r3, #4
 800605e:	3004      	addeq	r0, #4
 8006060:	079a      	lsls	r2, r3, #30
 8006062:	bf04      	itt	eq
 8006064:	089b      	lsreq	r3, r3, #2
 8006066:	3002      	addeq	r0, #2
 8006068:	07da      	lsls	r2, r3, #31
 800606a:	d402      	bmi.n	8006072 <__lo0bits+0x4e>
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	d006      	beq.n	800607e <__lo0bits+0x5a>
 8006070:	3001      	adds	r0, #1
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	4770      	bx	lr
 8006076:	4610      	mov	r0, r2
 8006078:	e7e9      	b.n	800604e <__lo0bits+0x2a>
 800607a:	2000      	movs	r0, #0
 800607c:	4770      	bx	lr
 800607e:	2020      	movs	r0, #32
 8006080:	4770      	bx	lr

08006082 <__i2b>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	2101      	movs	r1, #1
 8006088:	f7ff ff27 	bl	8005eda <_Balloc>
 800608c:	2201      	movs	r2, #1
 800608e:	6144      	str	r4, [r0, #20]
 8006090:	6102      	str	r2, [r0, #16]
 8006092:	bd10      	pop	{r4, pc}

08006094 <__multiply>:
 8006094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006098:	4614      	mov	r4, r2
 800609a:	690a      	ldr	r2, [r1, #16]
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	bfb8      	it	lt
 80060a2:	460b      	movlt	r3, r1
 80060a4:	4688      	mov	r8, r1
 80060a6:	bfbc      	itt	lt
 80060a8:	46a0      	movlt	r8, r4
 80060aa:	461c      	movlt	r4, r3
 80060ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060bc:	eb07 0609 	add.w	r6, r7, r9
 80060c0:	42b3      	cmp	r3, r6
 80060c2:	bfb8      	it	lt
 80060c4:	3101      	addlt	r1, #1
 80060c6:	f7ff ff08 	bl	8005eda <_Balloc>
 80060ca:	f100 0514 	add.w	r5, r0, #20
 80060ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80060d2:	462b      	mov	r3, r5
 80060d4:	2200      	movs	r2, #0
 80060d6:	4573      	cmp	r3, lr
 80060d8:	d316      	bcc.n	8006108 <__multiply+0x74>
 80060da:	f104 0214 	add.w	r2, r4, #20
 80060de:	f108 0114 	add.w	r1, r8, #20
 80060e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80060e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	9b00      	ldr	r3, [sp, #0]
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d80c      	bhi.n	800610e <__multiply+0x7a>
 80060f4:	2e00      	cmp	r6, #0
 80060f6:	dd03      	ble.n	8006100 <__multiply+0x6c>
 80060f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05d      	beq.n	80061bc <__multiply+0x128>
 8006100:	6106      	str	r6, [r0, #16]
 8006102:	b003      	add	sp, #12
 8006104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006108:	f843 2b04 	str.w	r2, [r3], #4
 800610c:	e7e3      	b.n	80060d6 <__multiply+0x42>
 800610e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006112:	f1bb 0f00 	cmp.w	fp, #0
 8006116:	d023      	beq.n	8006160 <__multiply+0xcc>
 8006118:	4689      	mov	r9, r1
 800611a:	46ac      	mov	ip, r5
 800611c:	f04f 0800 	mov.w	r8, #0
 8006120:	f859 4b04 	ldr.w	r4, [r9], #4
 8006124:	f8dc a000 	ldr.w	sl, [ip]
 8006128:	b2a3      	uxth	r3, r4
 800612a:	fa1f fa8a 	uxth.w	sl, sl
 800612e:	fb0b a303 	mla	r3, fp, r3, sl
 8006132:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006136:	f8dc 4000 	ldr.w	r4, [ip]
 800613a:	4443      	add	r3, r8
 800613c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006140:	fb0b 840a 	mla	r4, fp, sl, r8
 8006144:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006148:	46e2      	mov	sl, ip
 800614a:	b29b      	uxth	r3, r3
 800614c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006150:	454f      	cmp	r7, r9
 8006152:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006156:	f84a 3b04 	str.w	r3, [sl], #4
 800615a:	d82b      	bhi.n	80061b4 <__multiply+0x120>
 800615c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006166:	3204      	adds	r2, #4
 8006168:	f1ba 0f00 	cmp.w	sl, #0
 800616c:	d020      	beq.n	80061b0 <__multiply+0x11c>
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	4689      	mov	r9, r1
 8006172:	46a8      	mov	r8, r5
 8006174:	f04f 0b00 	mov.w	fp, #0
 8006178:	f8b9 c000 	ldrh.w	ip, [r9]
 800617c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006180:	fb0a 440c 	mla	r4, sl, ip, r4
 8006184:	445c      	add	r4, fp
 8006186:	46c4      	mov	ip, r8
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800618e:	f84c 3b04 	str.w	r3, [ip], #4
 8006192:	f859 3b04 	ldr.w	r3, [r9], #4
 8006196:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	fb0a b303 	mla	r3, sl, r3, fp
 80061a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061a4:	454f      	cmp	r7, r9
 80061a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061aa:	d805      	bhi.n	80061b8 <__multiply+0x124>
 80061ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80061b0:	3504      	adds	r5, #4
 80061b2:	e79b      	b.n	80060ec <__multiply+0x58>
 80061b4:	46d4      	mov	ip, sl
 80061b6:	e7b3      	b.n	8006120 <__multiply+0x8c>
 80061b8:	46e0      	mov	r8, ip
 80061ba:	e7dd      	b.n	8006178 <__multiply+0xe4>
 80061bc:	3e01      	subs	r6, #1
 80061be:	e799      	b.n	80060f4 <__multiply+0x60>

080061c0 <__pow5mult>:
 80061c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c4:	4615      	mov	r5, r2
 80061c6:	f012 0203 	ands.w	r2, r2, #3
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	d007      	beq.n	80061e0 <__pow5mult+0x20>
 80061d0:	3a01      	subs	r2, #1
 80061d2:	4c21      	ldr	r4, [pc, #132]	; (8006258 <__pow5mult+0x98>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061da:	f7ff fec9 	bl	8005f70 <__multadd>
 80061de:	4607      	mov	r7, r0
 80061e0:	10ad      	asrs	r5, r5, #2
 80061e2:	d035      	beq.n	8006250 <__pow5mult+0x90>
 80061e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061e6:	b93c      	cbnz	r4, 80061f8 <__pow5mult+0x38>
 80061e8:	2010      	movs	r0, #16
 80061ea:	f7ff fe63 	bl	8005eb4 <malloc>
 80061ee:	6270      	str	r0, [r6, #36]	; 0x24
 80061f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061f4:	6004      	str	r4, [r0, #0]
 80061f6:	60c4      	str	r4, [r0, #12]
 80061f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006200:	b94c      	cbnz	r4, 8006216 <__pow5mult+0x56>
 8006202:	f240 2171 	movw	r1, #625	; 0x271
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff ff3b 	bl	8006082 <__i2b>
 800620c:	2300      	movs	r3, #0
 800620e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006212:	4604      	mov	r4, r0
 8006214:	6003      	str	r3, [r0, #0]
 8006216:	f04f 0800 	mov.w	r8, #0
 800621a:	07eb      	lsls	r3, r5, #31
 800621c:	d50a      	bpl.n	8006234 <__pow5mult+0x74>
 800621e:	4639      	mov	r1, r7
 8006220:	4622      	mov	r2, r4
 8006222:	4630      	mov	r0, r6
 8006224:	f7ff ff36 	bl	8006094 <__multiply>
 8006228:	4639      	mov	r1, r7
 800622a:	4681      	mov	r9, r0
 800622c:	4630      	mov	r0, r6
 800622e:	f7ff fe88 	bl	8005f42 <_Bfree>
 8006232:	464f      	mov	r7, r9
 8006234:	106d      	asrs	r5, r5, #1
 8006236:	d00b      	beq.n	8006250 <__pow5mult+0x90>
 8006238:	6820      	ldr	r0, [r4, #0]
 800623a:	b938      	cbnz	r0, 800624c <__pow5mult+0x8c>
 800623c:	4622      	mov	r2, r4
 800623e:	4621      	mov	r1, r4
 8006240:	4630      	mov	r0, r6
 8006242:	f7ff ff27 	bl	8006094 <__multiply>
 8006246:	6020      	str	r0, [r4, #0]
 8006248:	f8c0 8000 	str.w	r8, [r0]
 800624c:	4604      	mov	r4, r0
 800624e:	e7e4      	b.n	800621a <__pow5mult+0x5a>
 8006250:	4638      	mov	r0, r7
 8006252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006256:	bf00      	nop
 8006258:	08006b10 	.word	0x08006b10

0800625c <__lshift>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	460c      	mov	r4, r1
 8006262:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	6849      	ldr	r1, [r1, #4]
 800626a:	eb0a 0903 	add.w	r9, sl, r3
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	4607      	mov	r7, r0
 8006272:	4616      	mov	r6, r2
 8006274:	f109 0501 	add.w	r5, r9, #1
 8006278:	42ab      	cmp	r3, r5
 800627a:	db32      	blt.n	80062e2 <__lshift+0x86>
 800627c:	4638      	mov	r0, r7
 800627e:	f7ff fe2c 	bl	8005eda <_Balloc>
 8006282:	2300      	movs	r3, #0
 8006284:	4680      	mov	r8, r0
 8006286:	f100 0114 	add.w	r1, r0, #20
 800628a:	461a      	mov	r2, r3
 800628c:	4553      	cmp	r3, sl
 800628e:	db2b      	blt.n	80062e8 <__lshift+0x8c>
 8006290:	6920      	ldr	r0, [r4, #16]
 8006292:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006296:	f104 0314 	add.w	r3, r4, #20
 800629a:	f016 021f 	ands.w	r2, r6, #31
 800629e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062a6:	d025      	beq.n	80062f4 <__lshift+0x98>
 80062a8:	f1c2 0e20 	rsb	lr, r2, #32
 80062ac:	2000      	movs	r0, #0
 80062ae:	681e      	ldr	r6, [r3, #0]
 80062b0:	468a      	mov	sl, r1
 80062b2:	4096      	lsls	r6, r2
 80062b4:	4330      	orrs	r0, r6
 80062b6:	f84a 0b04 	str.w	r0, [sl], #4
 80062ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80062be:	459c      	cmp	ip, r3
 80062c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80062c4:	d814      	bhi.n	80062f0 <__lshift+0x94>
 80062c6:	6048      	str	r0, [r1, #4]
 80062c8:	b108      	cbz	r0, 80062ce <__lshift+0x72>
 80062ca:	f109 0502 	add.w	r5, r9, #2
 80062ce:	3d01      	subs	r5, #1
 80062d0:	4638      	mov	r0, r7
 80062d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80062d6:	4621      	mov	r1, r4
 80062d8:	f7ff fe33 	bl	8005f42 <_Bfree>
 80062dc:	4640      	mov	r0, r8
 80062de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e2:	3101      	adds	r1, #1
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	e7c7      	b.n	8006278 <__lshift+0x1c>
 80062e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80062ec:	3301      	adds	r3, #1
 80062ee:	e7cd      	b.n	800628c <__lshift+0x30>
 80062f0:	4651      	mov	r1, sl
 80062f2:	e7dc      	b.n	80062ae <__lshift+0x52>
 80062f4:	3904      	subs	r1, #4
 80062f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80062fe:	459c      	cmp	ip, r3
 8006300:	d8f9      	bhi.n	80062f6 <__lshift+0x9a>
 8006302:	e7e4      	b.n	80062ce <__lshift+0x72>

08006304 <__mcmp>:
 8006304:	6903      	ldr	r3, [r0, #16]
 8006306:	690a      	ldr	r2, [r1, #16]
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	b530      	push	{r4, r5, lr}
 800630c:	d10c      	bne.n	8006328 <__mcmp+0x24>
 800630e:	0092      	lsls	r2, r2, #2
 8006310:	3014      	adds	r0, #20
 8006312:	3114      	adds	r1, #20
 8006314:	1884      	adds	r4, r0, r2
 8006316:	4411      	add	r1, r2
 8006318:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800631c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006320:	4295      	cmp	r5, r2
 8006322:	d003      	beq.n	800632c <__mcmp+0x28>
 8006324:	d305      	bcc.n	8006332 <__mcmp+0x2e>
 8006326:	2301      	movs	r3, #1
 8006328:	4618      	mov	r0, r3
 800632a:	bd30      	pop	{r4, r5, pc}
 800632c:	42a0      	cmp	r0, r4
 800632e:	d3f3      	bcc.n	8006318 <__mcmp+0x14>
 8006330:	e7fa      	b.n	8006328 <__mcmp+0x24>
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	e7f7      	b.n	8006328 <__mcmp+0x24>

08006338 <__mdiff>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	460d      	mov	r5, r1
 800633e:	4607      	mov	r7, r0
 8006340:	4611      	mov	r1, r2
 8006342:	4628      	mov	r0, r5
 8006344:	4614      	mov	r4, r2
 8006346:	f7ff ffdd 	bl	8006304 <__mcmp>
 800634a:	1e06      	subs	r6, r0, #0
 800634c:	d108      	bne.n	8006360 <__mdiff+0x28>
 800634e:	4631      	mov	r1, r6
 8006350:	4638      	mov	r0, r7
 8006352:	f7ff fdc2 	bl	8005eda <_Balloc>
 8006356:	2301      	movs	r3, #1
 8006358:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006360:	bfa4      	itt	ge
 8006362:	4623      	movge	r3, r4
 8006364:	462c      	movge	r4, r5
 8006366:	4638      	mov	r0, r7
 8006368:	6861      	ldr	r1, [r4, #4]
 800636a:	bfa6      	itte	ge
 800636c:	461d      	movge	r5, r3
 800636e:	2600      	movge	r6, #0
 8006370:	2601      	movlt	r6, #1
 8006372:	f7ff fdb2 	bl	8005eda <_Balloc>
 8006376:	692b      	ldr	r3, [r5, #16]
 8006378:	60c6      	str	r6, [r0, #12]
 800637a:	6926      	ldr	r6, [r4, #16]
 800637c:	f105 0914 	add.w	r9, r5, #20
 8006380:	f104 0214 	add.w	r2, r4, #20
 8006384:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006388:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800638c:	f100 0514 	add.w	r5, r0, #20
 8006390:	f04f 0e00 	mov.w	lr, #0
 8006394:	f852 ab04 	ldr.w	sl, [r2], #4
 8006398:	f859 4b04 	ldr.w	r4, [r9], #4
 800639c:	fa1e f18a 	uxtah	r1, lr, sl
 80063a0:	b2a3      	uxth	r3, r4
 80063a2:	1ac9      	subs	r1, r1, r3
 80063a4:	0c23      	lsrs	r3, r4, #16
 80063a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063ae:	b289      	uxth	r1, r1
 80063b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063b4:	45c8      	cmp	r8, r9
 80063b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063ba:	4694      	mov	ip, r2
 80063bc:	f845 3b04 	str.w	r3, [r5], #4
 80063c0:	d8e8      	bhi.n	8006394 <__mdiff+0x5c>
 80063c2:	45bc      	cmp	ip, r7
 80063c4:	d304      	bcc.n	80063d0 <__mdiff+0x98>
 80063c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063ca:	b183      	cbz	r3, 80063ee <__mdiff+0xb6>
 80063cc:	6106      	str	r6, [r0, #16]
 80063ce:	e7c5      	b.n	800635c <__mdiff+0x24>
 80063d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063d4:	fa1e f381 	uxtah	r3, lr, r1
 80063d8:	141a      	asrs	r2, r3, #16
 80063da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80063e8:	f845 3b04 	str.w	r3, [r5], #4
 80063ec:	e7e9      	b.n	80063c2 <__mdiff+0x8a>
 80063ee:	3e01      	subs	r6, #1
 80063f0:	e7e9      	b.n	80063c6 <__mdiff+0x8e>

080063f2 <__d2b>:
 80063f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063f6:	460e      	mov	r6, r1
 80063f8:	2101      	movs	r1, #1
 80063fa:	ec59 8b10 	vmov	r8, r9, d0
 80063fe:	4615      	mov	r5, r2
 8006400:	f7ff fd6b 	bl	8005eda <_Balloc>
 8006404:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006408:	4607      	mov	r7, r0
 800640a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800640e:	bb34      	cbnz	r4, 800645e <__d2b+0x6c>
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	f1b8 0300 	subs.w	r3, r8, #0
 8006416:	d027      	beq.n	8006468 <__d2b+0x76>
 8006418:	a802      	add	r0, sp, #8
 800641a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800641e:	f7ff fe01 	bl	8006024 <__lo0bits>
 8006422:	9900      	ldr	r1, [sp, #0]
 8006424:	b1f0      	cbz	r0, 8006464 <__d2b+0x72>
 8006426:	9a01      	ldr	r2, [sp, #4]
 8006428:	f1c0 0320 	rsb	r3, r0, #32
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	430b      	orrs	r3, r1
 8006432:	40c2      	lsrs	r2, r0
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	9201      	str	r2, [sp, #4]
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	bf14      	ite	ne
 8006440:	2102      	movne	r1, #2
 8006442:	2101      	moveq	r1, #1
 8006444:	6139      	str	r1, [r7, #16]
 8006446:	b1c4      	cbz	r4, 800647a <__d2b+0x88>
 8006448:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800644c:	4404      	add	r4, r0
 800644e:	6034      	str	r4, [r6, #0]
 8006450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006454:	6028      	str	r0, [r5, #0]
 8006456:	4638      	mov	r0, r7
 8006458:	b003      	add	sp, #12
 800645a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800645e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006462:	e7d5      	b.n	8006410 <__d2b+0x1e>
 8006464:	6179      	str	r1, [r7, #20]
 8006466:	e7e7      	b.n	8006438 <__d2b+0x46>
 8006468:	a801      	add	r0, sp, #4
 800646a:	f7ff fddb 	bl	8006024 <__lo0bits>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	2101      	movs	r1, #1
 8006474:	6139      	str	r1, [r7, #16]
 8006476:	3020      	adds	r0, #32
 8006478:	e7e5      	b.n	8006446 <__d2b+0x54>
 800647a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800647e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006482:	6030      	str	r0, [r6, #0]
 8006484:	6918      	ldr	r0, [r3, #16]
 8006486:	f7ff fdae 	bl	8005fe6 <__hi0bits>
 800648a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800648e:	e7e1      	b.n	8006454 <__d2b+0x62>

08006490 <_calloc_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	fb02 f401 	mul.w	r4, r2, r1
 8006496:	4621      	mov	r1, r4
 8006498:	f000 f856 	bl	8006548 <_malloc_r>
 800649c:	4605      	mov	r5, r0
 800649e:	b118      	cbz	r0, 80064a8 <_calloc_r+0x18>
 80064a0:	4622      	mov	r2, r4
 80064a2:	2100      	movs	r1, #0
 80064a4:	f7fe fa30 	bl	8004908 <memset>
 80064a8:	4628      	mov	r0, r5
 80064aa:	bd38      	pop	{r3, r4, r5, pc}

080064ac <_free_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4605      	mov	r5, r0
 80064b0:	2900      	cmp	r1, #0
 80064b2:	d045      	beq.n	8006540 <_free_r+0x94>
 80064b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b8:	1f0c      	subs	r4, r1, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfb8      	it	lt
 80064be:	18e4      	addlt	r4, r4, r3
 80064c0:	f000 fa29 	bl	8006916 <__malloc_lock>
 80064c4:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <_free_r+0x98>)
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	4610      	mov	r0, r2
 80064ca:	b933      	cbnz	r3, 80064da <_free_r+0x2e>
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	6014      	str	r4, [r2, #0]
 80064d0:	4628      	mov	r0, r5
 80064d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064d6:	f000 ba1f 	b.w	8006918 <__malloc_unlock>
 80064da:	42a3      	cmp	r3, r4
 80064dc:	d90c      	bls.n	80064f8 <_free_r+0x4c>
 80064de:	6821      	ldr	r1, [r4, #0]
 80064e0:	1862      	adds	r2, r4, r1
 80064e2:	4293      	cmp	r3, r2
 80064e4:	bf04      	itt	eq
 80064e6:	681a      	ldreq	r2, [r3, #0]
 80064e8:	685b      	ldreq	r3, [r3, #4]
 80064ea:	6063      	str	r3, [r4, #4]
 80064ec:	bf04      	itt	eq
 80064ee:	1852      	addeq	r2, r2, r1
 80064f0:	6022      	streq	r2, [r4, #0]
 80064f2:	6004      	str	r4, [r0, #0]
 80064f4:	e7ec      	b.n	80064d0 <_free_r+0x24>
 80064f6:	4613      	mov	r3, r2
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	b10a      	cbz	r2, 8006500 <_free_r+0x54>
 80064fc:	42a2      	cmp	r2, r4
 80064fe:	d9fa      	bls.n	80064f6 <_free_r+0x4a>
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	1858      	adds	r0, r3, r1
 8006504:	42a0      	cmp	r0, r4
 8006506:	d10b      	bne.n	8006520 <_free_r+0x74>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	4401      	add	r1, r0
 800650c:	1858      	adds	r0, r3, r1
 800650e:	4282      	cmp	r2, r0
 8006510:	6019      	str	r1, [r3, #0]
 8006512:	d1dd      	bne.n	80064d0 <_free_r+0x24>
 8006514:	6810      	ldr	r0, [r2, #0]
 8006516:	6852      	ldr	r2, [r2, #4]
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	4401      	add	r1, r0
 800651c:	6019      	str	r1, [r3, #0]
 800651e:	e7d7      	b.n	80064d0 <_free_r+0x24>
 8006520:	d902      	bls.n	8006528 <_free_r+0x7c>
 8006522:	230c      	movs	r3, #12
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	e7d3      	b.n	80064d0 <_free_r+0x24>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	1821      	adds	r1, r4, r0
 800652c:	428a      	cmp	r2, r1
 800652e:	bf04      	itt	eq
 8006530:	6811      	ldreq	r1, [r2, #0]
 8006532:	6852      	ldreq	r2, [r2, #4]
 8006534:	6062      	str	r2, [r4, #4]
 8006536:	bf04      	itt	eq
 8006538:	1809      	addeq	r1, r1, r0
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	605c      	str	r4, [r3, #4]
 800653e:	e7c7      	b.n	80064d0 <_free_r+0x24>
 8006540:	bd38      	pop	{r3, r4, r5, pc}
 8006542:	bf00      	nop
 8006544:	2000022c 	.word	0x2000022c

08006548 <_malloc_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	1ccd      	adds	r5, r1, #3
 800654c:	f025 0503 	bic.w	r5, r5, #3
 8006550:	3508      	adds	r5, #8
 8006552:	2d0c      	cmp	r5, #12
 8006554:	bf38      	it	cc
 8006556:	250c      	movcc	r5, #12
 8006558:	2d00      	cmp	r5, #0
 800655a:	4606      	mov	r6, r0
 800655c:	db01      	blt.n	8006562 <_malloc_r+0x1a>
 800655e:	42a9      	cmp	r1, r5
 8006560:	d903      	bls.n	800656a <_malloc_r+0x22>
 8006562:	230c      	movs	r3, #12
 8006564:	6033      	str	r3, [r6, #0]
 8006566:	2000      	movs	r0, #0
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	f000 f9d4 	bl	8006916 <__malloc_lock>
 800656e:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <_malloc_r+0xac>)
 8006570:	6814      	ldr	r4, [r2, #0]
 8006572:	4621      	mov	r1, r4
 8006574:	b991      	cbnz	r1, 800659c <_malloc_r+0x54>
 8006576:	4c20      	ldr	r4, [pc, #128]	; (80065f8 <_malloc_r+0xb0>)
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	b91b      	cbnz	r3, 8006584 <_malloc_r+0x3c>
 800657c:	4630      	mov	r0, r6
 800657e:	f000 f98f 	bl	80068a0 <_sbrk_r>
 8006582:	6020      	str	r0, [r4, #0]
 8006584:	4629      	mov	r1, r5
 8006586:	4630      	mov	r0, r6
 8006588:	f000 f98a 	bl	80068a0 <_sbrk_r>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d124      	bne.n	80065da <_malloc_r+0x92>
 8006590:	230c      	movs	r3, #12
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f9bf 	bl	8006918 <__malloc_unlock>
 800659a:	e7e4      	b.n	8006566 <_malloc_r+0x1e>
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	1b5b      	subs	r3, r3, r5
 80065a0:	d418      	bmi.n	80065d4 <_malloc_r+0x8c>
 80065a2:	2b0b      	cmp	r3, #11
 80065a4:	d90f      	bls.n	80065c6 <_malloc_r+0x7e>
 80065a6:	600b      	str	r3, [r1, #0]
 80065a8:	50cd      	str	r5, [r1, r3]
 80065aa:	18cc      	adds	r4, r1, r3
 80065ac:	4630      	mov	r0, r6
 80065ae:	f000 f9b3 	bl	8006918 <__malloc_unlock>
 80065b2:	f104 000b 	add.w	r0, r4, #11
 80065b6:	1d23      	adds	r3, r4, #4
 80065b8:	f020 0007 	bic.w	r0, r0, #7
 80065bc:	1ac3      	subs	r3, r0, r3
 80065be:	d0d3      	beq.n	8006568 <_malloc_r+0x20>
 80065c0:	425a      	negs	r2, r3
 80065c2:	50e2      	str	r2, [r4, r3]
 80065c4:	e7d0      	b.n	8006568 <_malloc_r+0x20>
 80065c6:	428c      	cmp	r4, r1
 80065c8:	684b      	ldr	r3, [r1, #4]
 80065ca:	bf16      	itet	ne
 80065cc:	6063      	strne	r3, [r4, #4]
 80065ce:	6013      	streq	r3, [r2, #0]
 80065d0:	460c      	movne	r4, r1
 80065d2:	e7eb      	b.n	80065ac <_malloc_r+0x64>
 80065d4:	460c      	mov	r4, r1
 80065d6:	6849      	ldr	r1, [r1, #4]
 80065d8:	e7cc      	b.n	8006574 <_malloc_r+0x2c>
 80065da:	1cc4      	adds	r4, r0, #3
 80065dc:	f024 0403 	bic.w	r4, r4, #3
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d005      	beq.n	80065f0 <_malloc_r+0xa8>
 80065e4:	1a21      	subs	r1, r4, r0
 80065e6:	4630      	mov	r0, r6
 80065e8:	f000 f95a 	bl	80068a0 <_sbrk_r>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d0cf      	beq.n	8006590 <_malloc_r+0x48>
 80065f0:	6025      	str	r5, [r4, #0]
 80065f2:	e7db      	b.n	80065ac <_malloc_r+0x64>
 80065f4:	2000022c 	.word	0x2000022c
 80065f8:	20000230 	.word	0x20000230

080065fc <__ssputs_r>:
 80065fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	688e      	ldr	r6, [r1, #8]
 8006602:	429e      	cmp	r6, r3
 8006604:	4682      	mov	sl, r0
 8006606:	460c      	mov	r4, r1
 8006608:	4690      	mov	r8, r2
 800660a:	4699      	mov	r9, r3
 800660c:	d837      	bhi.n	800667e <__ssputs_r+0x82>
 800660e:	898a      	ldrh	r2, [r1, #12]
 8006610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006614:	d031      	beq.n	800667a <__ssputs_r+0x7e>
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	6909      	ldr	r1, [r1, #16]
 800661a:	1a6f      	subs	r7, r5, r1
 800661c:	6965      	ldr	r5, [r4, #20]
 800661e:	2302      	movs	r3, #2
 8006620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006624:	fb95 f5f3 	sdiv	r5, r5, r3
 8006628:	f109 0301 	add.w	r3, r9, #1
 800662c:	443b      	add	r3, r7
 800662e:	429d      	cmp	r5, r3
 8006630:	bf38      	it	cc
 8006632:	461d      	movcc	r5, r3
 8006634:	0553      	lsls	r3, r2, #21
 8006636:	d530      	bpl.n	800669a <__ssputs_r+0x9e>
 8006638:	4629      	mov	r1, r5
 800663a:	f7ff ff85 	bl	8006548 <_malloc_r>
 800663e:	4606      	mov	r6, r0
 8006640:	b950      	cbnz	r0, 8006658 <__ssputs_r+0x5c>
 8006642:	230c      	movs	r3, #12
 8006644:	f8ca 3000 	str.w	r3, [sl]
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006658:	463a      	mov	r2, r7
 800665a:	6921      	ldr	r1, [r4, #16]
 800665c:	f7ff fc32 	bl	8005ec4 <memcpy>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	6126      	str	r6, [r4, #16]
 800666e:	6165      	str	r5, [r4, #20]
 8006670:	443e      	add	r6, r7
 8006672:	1bed      	subs	r5, r5, r7
 8006674:	6026      	str	r6, [r4, #0]
 8006676:	60a5      	str	r5, [r4, #8]
 8006678:	464e      	mov	r6, r9
 800667a:	454e      	cmp	r6, r9
 800667c:	d900      	bls.n	8006680 <__ssputs_r+0x84>
 800667e:	464e      	mov	r6, r9
 8006680:	4632      	mov	r2, r6
 8006682:	4641      	mov	r1, r8
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	f000 f92d 	bl	80068e4 <memmove>
 800668a:	68a3      	ldr	r3, [r4, #8]
 800668c:	1b9b      	subs	r3, r3, r6
 800668e:	60a3      	str	r3, [r4, #8]
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	441e      	add	r6, r3
 8006694:	6026      	str	r6, [r4, #0]
 8006696:	2000      	movs	r0, #0
 8006698:	e7dc      	b.n	8006654 <__ssputs_r+0x58>
 800669a:	462a      	mov	r2, r5
 800669c:	f000 f93d 	bl	800691a <_realloc_r>
 80066a0:	4606      	mov	r6, r0
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d1e2      	bne.n	800666c <__ssputs_r+0x70>
 80066a6:	6921      	ldr	r1, [r4, #16]
 80066a8:	4650      	mov	r0, sl
 80066aa:	f7ff feff 	bl	80064ac <_free_r>
 80066ae:	e7c8      	b.n	8006642 <__ssputs_r+0x46>

080066b0 <_svfiprintf_r>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	461d      	mov	r5, r3
 80066b6:	898b      	ldrh	r3, [r1, #12]
 80066b8:	061f      	lsls	r7, r3, #24
 80066ba:	b09d      	sub	sp, #116	; 0x74
 80066bc:	4680      	mov	r8, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	4616      	mov	r6, r2
 80066c2:	d50f      	bpl.n	80066e4 <_svfiprintf_r+0x34>
 80066c4:	690b      	ldr	r3, [r1, #16]
 80066c6:	b96b      	cbnz	r3, 80066e4 <_svfiprintf_r+0x34>
 80066c8:	2140      	movs	r1, #64	; 0x40
 80066ca:	f7ff ff3d 	bl	8006548 <_malloc_r>
 80066ce:	6020      	str	r0, [r4, #0]
 80066d0:	6120      	str	r0, [r4, #16]
 80066d2:	b928      	cbnz	r0, 80066e0 <_svfiprintf_r+0x30>
 80066d4:	230c      	movs	r3, #12
 80066d6:	f8c8 3000 	str.w	r3, [r8]
 80066da:	f04f 30ff 	mov.w	r0, #4294967295
 80066de:	e0c8      	b.n	8006872 <_svfiprintf_r+0x1c2>
 80066e0:	2340      	movs	r3, #64	; 0x40
 80066e2:	6163      	str	r3, [r4, #20]
 80066e4:	2300      	movs	r3, #0
 80066e6:	9309      	str	r3, [sp, #36]	; 0x24
 80066e8:	2320      	movs	r3, #32
 80066ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ee:	2330      	movs	r3, #48	; 0x30
 80066f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066f4:	9503      	str	r5, [sp, #12]
 80066f6:	f04f 0b01 	mov.w	fp, #1
 80066fa:	4637      	mov	r7, r6
 80066fc:	463d      	mov	r5, r7
 80066fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006702:	b10b      	cbz	r3, 8006708 <_svfiprintf_r+0x58>
 8006704:	2b25      	cmp	r3, #37	; 0x25
 8006706:	d13e      	bne.n	8006786 <_svfiprintf_r+0xd6>
 8006708:	ebb7 0a06 	subs.w	sl, r7, r6
 800670c:	d00b      	beq.n	8006726 <_svfiprintf_r+0x76>
 800670e:	4653      	mov	r3, sl
 8006710:	4632      	mov	r2, r6
 8006712:	4621      	mov	r1, r4
 8006714:	4640      	mov	r0, r8
 8006716:	f7ff ff71 	bl	80065fc <__ssputs_r>
 800671a:	3001      	adds	r0, #1
 800671c:	f000 80a4 	beq.w	8006868 <_svfiprintf_r+0x1b8>
 8006720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006722:	4453      	add	r3, sl
 8006724:	9309      	str	r3, [sp, #36]	; 0x24
 8006726:	783b      	ldrb	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 809d 	beq.w	8006868 <_svfiprintf_r+0x1b8>
 800672e:	2300      	movs	r3, #0
 8006730:	f04f 32ff 	mov.w	r2, #4294967295
 8006734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006738:	9304      	str	r3, [sp, #16]
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006740:	931a      	str	r3, [sp, #104]	; 0x68
 8006742:	462f      	mov	r7, r5
 8006744:	2205      	movs	r2, #5
 8006746:	f817 1b01 	ldrb.w	r1, [r7], #1
 800674a:	4850      	ldr	r0, [pc, #320]	; (800688c <_svfiprintf_r+0x1dc>)
 800674c:	f7f9 fd50 	bl	80001f0 <memchr>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	b9d0      	cbnz	r0, 800678a <_svfiprintf_r+0xda>
 8006754:	06d9      	lsls	r1, r3, #27
 8006756:	bf44      	itt	mi
 8006758:	2220      	movmi	r2, #32
 800675a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800675e:	071a      	lsls	r2, r3, #28
 8006760:	bf44      	itt	mi
 8006762:	222b      	movmi	r2, #43	; 0x2b
 8006764:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006768:	782a      	ldrb	r2, [r5, #0]
 800676a:	2a2a      	cmp	r2, #42	; 0x2a
 800676c:	d015      	beq.n	800679a <_svfiprintf_r+0xea>
 800676e:	9a07      	ldr	r2, [sp, #28]
 8006770:	462f      	mov	r7, r5
 8006772:	2000      	movs	r0, #0
 8006774:	250a      	movs	r5, #10
 8006776:	4639      	mov	r1, r7
 8006778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	d94d      	bls.n	800681e <_svfiprintf_r+0x16e>
 8006782:	b1b8      	cbz	r0, 80067b4 <_svfiprintf_r+0x104>
 8006784:	e00f      	b.n	80067a6 <_svfiprintf_r+0xf6>
 8006786:	462f      	mov	r7, r5
 8006788:	e7b8      	b.n	80066fc <_svfiprintf_r+0x4c>
 800678a:	4a40      	ldr	r2, [pc, #256]	; (800688c <_svfiprintf_r+0x1dc>)
 800678c:	1a80      	subs	r0, r0, r2
 800678e:	fa0b f000 	lsl.w	r0, fp, r0
 8006792:	4318      	orrs	r0, r3
 8006794:	9004      	str	r0, [sp, #16]
 8006796:	463d      	mov	r5, r7
 8006798:	e7d3      	b.n	8006742 <_svfiprintf_r+0x92>
 800679a:	9a03      	ldr	r2, [sp, #12]
 800679c:	1d11      	adds	r1, r2, #4
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	9103      	str	r1, [sp, #12]
 80067a2:	2a00      	cmp	r2, #0
 80067a4:	db01      	blt.n	80067aa <_svfiprintf_r+0xfa>
 80067a6:	9207      	str	r2, [sp, #28]
 80067a8:	e004      	b.n	80067b4 <_svfiprintf_r+0x104>
 80067aa:	4252      	negs	r2, r2
 80067ac:	f043 0302 	orr.w	r3, r3, #2
 80067b0:	9207      	str	r2, [sp, #28]
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	783b      	ldrb	r3, [r7, #0]
 80067b6:	2b2e      	cmp	r3, #46	; 0x2e
 80067b8:	d10c      	bne.n	80067d4 <_svfiprintf_r+0x124>
 80067ba:	787b      	ldrb	r3, [r7, #1]
 80067bc:	2b2a      	cmp	r3, #42	; 0x2a
 80067be:	d133      	bne.n	8006828 <_svfiprintf_r+0x178>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	9203      	str	r2, [sp, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfb8      	it	lt
 80067cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80067d0:	3702      	adds	r7, #2
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	4d2e      	ldr	r5, [pc, #184]	; (8006890 <_svfiprintf_r+0x1e0>)
 80067d6:	7839      	ldrb	r1, [r7, #0]
 80067d8:	2203      	movs	r2, #3
 80067da:	4628      	mov	r0, r5
 80067dc:	f7f9 fd08 	bl	80001f0 <memchr>
 80067e0:	b138      	cbz	r0, 80067f2 <_svfiprintf_r+0x142>
 80067e2:	2340      	movs	r3, #64	; 0x40
 80067e4:	1b40      	subs	r0, r0, r5
 80067e6:	fa03 f000 	lsl.w	r0, r3, r0
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	4303      	orrs	r3, r0
 80067ee:	3701      	adds	r7, #1
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	7839      	ldrb	r1, [r7, #0]
 80067f4:	4827      	ldr	r0, [pc, #156]	; (8006894 <_svfiprintf_r+0x1e4>)
 80067f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fa:	2206      	movs	r2, #6
 80067fc:	1c7e      	adds	r6, r7, #1
 80067fe:	f7f9 fcf7 	bl	80001f0 <memchr>
 8006802:	2800      	cmp	r0, #0
 8006804:	d038      	beq.n	8006878 <_svfiprintf_r+0x1c8>
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <_svfiprintf_r+0x1e8>)
 8006808:	bb13      	cbnz	r3, 8006850 <_svfiprintf_r+0x1a0>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	3307      	adds	r3, #7
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	3308      	adds	r3, #8
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	444b      	add	r3, r9
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	e76d      	b.n	80066fa <_svfiprintf_r+0x4a>
 800681e:	fb05 3202 	mla	r2, r5, r2, r3
 8006822:	2001      	movs	r0, #1
 8006824:	460f      	mov	r7, r1
 8006826:	e7a6      	b.n	8006776 <_svfiprintf_r+0xc6>
 8006828:	2300      	movs	r3, #0
 800682a:	3701      	adds	r7, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	4619      	mov	r1, r3
 8006830:	250a      	movs	r5, #10
 8006832:	4638      	mov	r0, r7
 8006834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006838:	3a30      	subs	r2, #48	; 0x30
 800683a:	2a09      	cmp	r2, #9
 800683c:	d903      	bls.n	8006846 <_svfiprintf_r+0x196>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0c8      	beq.n	80067d4 <_svfiprintf_r+0x124>
 8006842:	9105      	str	r1, [sp, #20]
 8006844:	e7c6      	b.n	80067d4 <_svfiprintf_r+0x124>
 8006846:	fb05 2101 	mla	r1, r5, r1, r2
 800684a:	2301      	movs	r3, #1
 800684c:	4607      	mov	r7, r0
 800684e:	e7f0      	b.n	8006832 <_svfiprintf_r+0x182>
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	4622      	mov	r2, r4
 8006856:	4b11      	ldr	r3, [pc, #68]	; (800689c <_svfiprintf_r+0x1ec>)
 8006858:	a904      	add	r1, sp, #16
 800685a:	4640      	mov	r0, r8
 800685c:	f7fe f8f0 	bl	8004a40 <_printf_float>
 8006860:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006864:	4681      	mov	r9, r0
 8006866:	d1d6      	bne.n	8006816 <_svfiprintf_r+0x166>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	065b      	lsls	r3, r3, #25
 800686c:	f53f af35 	bmi.w	80066da <_svfiprintf_r+0x2a>
 8006870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006872:	b01d      	add	sp, #116	; 0x74
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	ab03      	add	r3, sp, #12
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	4622      	mov	r2, r4
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <_svfiprintf_r+0x1ec>)
 8006880:	a904      	add	r1, sp, #16
 8006882:	4640      	mov	r0, r8
 8006884:	f7fe fb92 	bl	8004fac <_printf_i>
 8006888:	e7ea      	b.n	8006860 <_svfiprintf_r+0x1b0>
 800688a:	bf00      	nop
 800688c:	08006b1c 	.word	0x08006b1c
 8006890:	08006b22 	.word	0x08006b22
 8006894:	08006b26 	.word	0x08006b26
 8006898:	08004a41 	.word	0x08004a41
 800689c:	080065fd 	.word	0x080065fd

080068a0 <_sbrk_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4c06      	ldr	r4, [pc, #24]	; (80068bc <_sbrk_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4605      	mov	r5, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	f7fb f97c 	bl	8001ba8 <_sbrk>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_sbrk_r+0x1a>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_sbrk_r+0x1a>
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	20000388 	.word	0x20000388

080068c0 <__ascii_mbtowc>:
 80068c0:	b082      	sub	sp, #8
 80068c2:	b901      	cbnz	r1, 80068c6 <__ascii_mbtowc+0x6>
 80068c4:	a901      	add	r1, sp, #4
 80068c6:	b142      	cbz	r2, 80068da <__ascii_mbtowc+0x1a>
 80068c8:	b14b      	cbz	r3, 80068de <__ascii_mbtowc+0x1e>
 80068ca:	7813      	ldrb	r3, [r2, #0]
 80068cc:	600b      	str	r3, [r1, #0]
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	1c10      	adds	r0, r2, #0
 80068d2:	bf18      	it	ne
 80068d4:	2001      	movne	r0, #1
 80068d6:	b002      	add	sp, #8
 80068d8:	4770      	bx	lr
 80068da:	4610      	mov	r0, r2
 80068dc:	e7fb      	b.n	80068d6 <__ascii_mbtowc+0x16>
 80068de:	f06f 0001 	mvn.w	r0, #1
 80068e2:	e7f8      	b.n	80068d6 <__ascii_mbtowc+0x16>

080068e4 <memmove>:
 80068e4:	4288      	cmp	r0, r1
 80068e6:	b510      	push	{r4, lr}
 80068e8:	eb01 0302 	add.w	r3, r1, r2
 80068ec:	d807      	bhi.n	80068fe <memmove+0x1a>
 80068ee:	1e42      	subs	r2, r0, #1
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d00a      	beq.n	800690a <memmove+0x26>
 80068f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80068fc:	e7f8      	b.n	80068f0 <memmove+0xc>
 80068fe:	4283      	cmp	r3, r0
 8006900:	d9f5      	bls.n	80068ee <memmove+0xa>
 8006902:	1881      	adds	r1, r0, r2
 8006904:	1ad2      	subs	r2, r2, r3
 8006906:	42d3      	cmn	r3, r2
 8006908:	d100      	bne.n	800690c <memmove+0x28>
 800690a:	bd10      	pop	{r4, pc}
 800690c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006910:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006914:	e7f7      	b.n	8006906 <memmove+0x22>

08006916 <__malloc_lock>:
 8006916:	4770      	bx	lr

08006918 <__malloc_unlock>:
 8006918:	4770      	bx	lr

0800691a <_realloc_r>:
 800691a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691c:	4607      	mov	r7, r0
 800691e:	4614      	mov	r4, r2
 8006920:	460e      	mov	r6, r1
 8006922:	b921      	cbnz	r1, 800692e <_realloc_r+0x14>
 8006924:	4611      	mov	r1, r2
 8006926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800692a:	f7ff be0d 	b.w	8006548 <_malloc_r>
 800692e:	b922      	cbnz	r2, 800693a <_realloc_r+0x20>
 8006930:	f7ff fdbc 	bl	80064ac <_free_r>
 8006934:	4625      	mov	r5, r4
 8006936:	4628      	mov	r0, r5
 8006938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800693a:	f000 f821 	bl	8006980 <_malloc_usable_size_r>
 800693e:	42a0      	cmp	r0, r4
 8006940:	d20f      	bcs.n	8006962 <_realloc_r+0x48>
 8006942:	4621      	mov	r1, r4
 8006944:	4638      	mov	r0, r7
 8006946:	f7ff fdff 	bl	8006548 <_malloc_r>
 800694a:	4605      	mov	r5, r0
 800694c:	2800      	cmp	r0, #0
 800694e:	d0f2      	beq.n	8006936 <_realloc_r+0x1c>
 8006950:	4631      	mov	r1, r6
 8006952:	4622      	mov	r2, r4
 8006954:	f7ff fab6 	bl	8005ec4 <memcpy>
 8006958:	4631      	mov	r1, r6
 800695a:	4638      	mov	r0, r7
 800695c:	f7ff fda6 	bl	80064ac <_free_r>
 8006960:	e7e9      	b.n	8006936 <_realloc_r+0x1c>
 8006962:	4635      	mov	r5, r6
 8006964:	e7e7      	b.n	8006936 <_realloc_r+0x1c>

08006966 <__ascii_wctomb>:
 8006966:	b149      	cbz	r1, 800697c <__ascii_wctomb+0x16>
 8006968:	2aff      	cmp	r2, #255	; 0xff
 800696a:	bf85      	ittet	hi
 800696c:	238a      	movhi	r3, #138	; 0x8a
 800696e:	6003      	strhi	r3, [r0, #0]
 8006970:	700a      	strbls	r2, [r1, #0]
 8006972:	f04f 30ff 	movhi.w	r0, #4294967295
 8006976:	bf98      	it	ls
 8006978:	2001      	movls	r0, #1
 800697a:	4770      	bx	lr
 800697c:	4608      	mov	r0, r1
 800697e:	4770      	bx	lr

08006980 <_malloc_usable_size_r>:
 8006980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006984:	1f18      	subs	r0, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfbc      	itt	lt
 800698a:	580b      	ldrlt	r3, [r1, r0]
 800698c:	18c0      	addlt	r0, r0, r3
 800698e:	4770      	bx	lr

08006990 <_init>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	bf00      	nop
 8006994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006996:	bc08      	pop	{r3}
 8006998:	469e      	mov	lr, r3
 800699a:	4770      	bx	lr

0800699c <_fini>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	bf00      	nop
 80069a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a2:	bc08      	pop	{r3}
 80069a4:	469e      	mov	lr, r3
 80069a6:	4770      	bx	lr
